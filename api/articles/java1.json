{"title":"qm Java note","uid":"8a52b678b373829720d5a0fbb61a4c60","slug":"java1","date":"2022-05-29T15:03:46.000Z","updated":"2022-06-02T08:48:17.719Z","comments":true,"path":"api/articles/java1.json","keywords":null,"cover":"/images/2.jpg","content":"<h1 id=\"JAVA-NOTE\"><a href=\"#JAVA-NOTE\" class=\"headerlink\" title=\"JAVA NOTE\"></a><strong>JAVA NOTE</strong></h1><hr>\n<p>大二下学期qm Java的笔记（略有补充），仅供参考</p>\n<hr>\n<p>[TOC]</p>\n<h2 id=\"Teaching-Block1\"><a href=\"#Teaching-Block1\" class=\"headerlink\" title=\"Teaching Block1\"></a>Teaching Block1</h2><h3 id=\"1-phase-of-java-program\"><a href=\"#1-phase-of-java-program\" class=\"headerlink\" title=\"1.phase of java program\"></a>1.phase of java program</h3><p>phase1: Edit(by editor ):  Every java program have the extensing <em>.java</em></p>\n<p>phase2: Compile(编译器): </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>translates your program into bytecode so that the Java interpreter can read the   program（MyProgram.class）                     </p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">javac Myprogram.java<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Phase 3: Load + Phase 4: Verify</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>loading into memory</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">java MyProgram<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Phase 5: Execute</p>\n<p>The file name and the class name must be the same. </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">MyProgram</span><span class=\"token punctuation\">.</span>java<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>To compile the program, type (with file extension编译时加后缀):</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">javac MyProgram.java<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>To run the program, type (without file extension运行不加后缀):</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">java MyProgram<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>The interpreter executes <strong>main</strong> first.</p>\n<p>JVM包括：</p>\n<p><strong>javac</strong>: compiler</p>\n<p><strong>java</strong>: launcher for Java applications</p>\n<p><strong>javadoc</strong>: API documentation generator</p>\n<p><strong>jar</strong>: manages JAR files</p>\n<p><strong>jdb</strong>: Java debugger</p>\n<h5 id=\"1-1-补充1-常见dos命令\"><a href=\"#1-1-补充1-常见dos命令\" class=\"headerlink\" title=\"1.1.补充1.常见dos命令\"></a>1.1.补充1.常见dos命令</h5><p><img src=\"java1/image-20220602155429917.png\" alt=\"java1/image-20220602155429917\"></p>\n<h5 id=\"1-2-补充2-main-method\"><a href=\"#1-2-补充2-main-method\" class=\"headerlink\" title=\"1.2.补充2.main method\"></a>1.2.补充2.main method</h5><p><img src=\"java1/image-20220602155449779.png\" alt=\"java1/image-20220602155449779\"></p>\n<h3 id=\"2-Basic-data-types（基本数据类型、引用数据类型）\"><a href=\"#2-Basic-data-types（基本数据类型、引用数据类型）\" class=\"headerlink\" title=\"2.Basic data types（基本数据类型、引用数据类型）\"></a>2.Basic data types（基本数据类型、引用数据类型）</h3><h4 id=\"2-1-introduction\"><a href=\"#2-1-introduction\" class=\"headerlink\" title=\"2.1.introduction\"></a>2.1.introduction</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>   Java is strongly typed and strongly classed– Only variables with the same types or classes can be used together.</p></blockquote>\n<p><img src=\"java1/image-20220602155501582.png\" alt=\"java1/image-20220602155501582\"></p>\n<p>Every data type in Java has a default value</p>\n<p><img src=\"java1/image-20220602155513020.png\" alt=\"java1/image-20220602155513020\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>long类型在数字后面加L否则整数默认为int类型</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>float 加F 否则小数默认为 double类型</p></blockquote>\n<h4 id=\"2-2-补充1-变量命名规则\"><a href=\"#2-2-补充1-变量命名规则\" class=\"headerlink\" title=\"2.2.补充1.变量命名规则\"></a>2.2.补充1.变量命名规则</h4><p><img src=\"java1/image-20220602155522944.png\" alt=\"java1/image-20220602155522944\"></p>\n<p><img src=\"java1/image-20220602155531449.png\" alt=\"java1/image-20220602155531449\"></p>\n<h4 id=\"2-3-补充2-类型转换\"><a href=\"#2-3-补充2-类型转换\" class=\"headerlink\" title=\"2.3.补充2.类型转换\"></a>2.3.补充2.类型转换</h4><p> 自动类型转换：范围小的数赋值给范围大的数</p>\n<p>强制类型转化(type cast operator.) ：范围大的数赋值给范围小的数</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">88.8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>  Conversion between numeric types:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>byte &#x3D;&gt; short &#x3D;&gt; int &#x3D;&gt; long &#x3D;&gt; float &#x3D;&gt; double</strong></p></blockquote>\n<p>​                                         </p>\n<h3 id=\"3-Operators\"><a href=\"#3-Operators\" class=\"headerlink\" title=\"3.Operators\"></a>3.Operators</h3><h4 id=\"3-1-introduction\"><a href=\"#3-1-introduction\" class=\"headerlink\" title=\"3.1.introduction\"></a>3.1.introduction</h4><ul>\n<li><h5 id=\"Increments-and-Decrements\"><a href=\"#Increments-and-Decrements\" class=\"headerlink\" title=\"Increments and Decrements\"></a>Increments and Decrements</h5></li>\n</ul>\n<p><img src=\"java1/image-20220602155541419.png\" alt=\"java1/image-20220602155541419\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>– A post operation causes the variable to first be used  in the current statement, and then it is incremented or decremented afterwards.</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>– A pre operation causes the variable to first be incremented or decremented, and then it is used in the current statement.</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Post</span> incrementing\n\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result = \"</span> <span class=\"token operator\">+</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\", a = \"</span> <span class=\"token operator\">+</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nOUTPUT<span class=\"token operator\">:</span>\nresult<span class=\"token operator\">=</span><span class=\"token number\">9</span> a<span class=\"token operator\">=</span><span class=\"token number\">5</span>\n\na <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result = \"</span> <span class=\"token operator\">+</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\", a = \"</span> <span class=\"token operator\">+</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nOUTPUT<span class=\"token operator\">:</span>\nresult<span class=\"token operator\">=</span><span class=\"token number\">8</span> a<span class=\"token operator\">=</span><span class=\"token number\">5</span>\n\n<span class=\"token class-name\">Pre</span> incrementing\n\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result = \"</span> <span class=\"token operator\">+</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\", a = \"</span> <span class=\"token operator\">+</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nOUTPUT<span class=\"token operator\">:</span>\nresult<span class=\"token operator\">=</span><span class=\"token number\">10</span> a<span class=\"token operator\">=</span><span class=\"token number\">5</span>\n\na <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result = \"</span> <span class=\"token operator\">+</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\", a = \"</span> <span class=\"token operator\">+</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nOUTPUT<span class=\"token operator\">:</span>\nresult<span class=\"token operator\">=</span><span class=\"token number\">9</span> a<span class=\"token operator\">=</span><span class=\"token number\">5</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li><h5 id=\"Operator-Precedence-优先级\"><a href=\"#Operator-Precedence-优先级\" class=\"headerlink\" title=\"Operator Precedence(优先级)\"></a>Operator Precedence(优先级)</h5></li>\n</ul>\n<p><img src=\"java1/image-20220602155603848.png\" alt=\"java1/image-20220602155603848\"></p>\n<ul>\n<li><h5 id=\"Relational-Operations\"><a href=\"#Relational-Operations\" class=\"headerlink\" title=\"Relational Operations\"></a>Relational Operations</h5></li>\n</ul>\n<p><img src=\"java1/image-20220602155619089.png\" alt=\"java1/image-20220602155619089\"></p>\n<ul>\n<li><h5 id=\"Logical-operators\"><a href=\"#Logical-operators\" class=\"headerlink\" title=\"Logical operators\"></a>Logical operators</h5></li>\n</ul>\n<img src=\"image-20220602155715737.png\" alt=\"image-20220602155715737\" style=\"zoom:50%;\" />\n\n<p>– binary operators (except assignment) are evaluated from left to right</p>\n<p>– assignment operators are evaluated right to left</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\na<span class=\"token operator\">/</span>b<span class=\"token operator\">/</span>c都为<span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>if-else statement</p>\n<p>Relational expression must evaluate to a <strong>boolean</strong> value</p>\n<p><img src=\"java1/image-20220602155736411.png\" alt=\"java1/image-20220602155736411\"></p>\n</li>\n<li><h5 id=\"switch-statement\"><a href=\"#switch-statement\" class=\"headerlink\" title=\"switch statement\"></a>switch statement</h5></li>\n</ul>\n<p><img src=\"java1/image-20220602155809690.png\" alt=\"java1/image-20220602155809690\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>break</strong> – causes the remainder of the **switch **statement to be skipped</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>default</strong> – action in case none of the cases match</p></blockquote>\n<ul>\n<li><h5 id=\"Conditional-Operator\"><a href=\"#Conditional-Operator\" class=\"headerlink\" title=\"Conditional Operator\"></a><strong>Conditional Operator</strong></h5></li>\n</ul>\n<img src=\"C:\\Users\\zzh\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220324000052503.png\" alt=\"image-20220324000052503\" style=\"zoom:50%;\" />\n\n<ul>\n<li><h5 id=\"The-break-and-continue-statements\"><a href=\"#The-break-and-continue-statements\" class=\"headerlink\" title=\"The break and continue statements\"></a><strong>The</strong> <strong>break</strong> <strong>and</strong> <strong>continue</strong> <strong>statements</strong></h5></li>\n</ul>\n<p>​         break——quitting the loop</p>\n<p>​         continue——skipping the current iteration</p>\n<p>​      补充:<strong>Using labelled statement blocks with</strong> <em>break</em> and <em>continue</em></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">outer<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin outer for i=\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \ninner<span class=\"token operator\">:</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span> outer<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">outer<span class=\"token operator\">:</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin outer for i=\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \ninner<span class=\"token operator\">:</span>\n     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"   inner: i=\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\" j=\"</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End outer for i=\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n   <span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2-IDEA使用\"><a href=\"#3-2-IDEA使用\" class=\"headerlink\" title=\"3.2.IDEA使用\"></a>3.2.IDEA使用</h4><ul>\n<li>项目结构：模块-包-java类</li>\n</ul>\n<p><img src=\"java1/image-20220324132520475-1653819852851.png\" alt=\"java1/image-20220324132520475\"></p>\n<ul>\n<li>快捷键</li>\n</ul>\n<p><img src=\"java1/image-20220324132751831-1653819852852.png\" alt=\"java1/image-20220324132751831\"></p>\n<p><img src=\"java1/image-20220324132830940-1653819852852.png\" alt=\"java1/image-20220324132830940\"></p>\n<h3 id=\"4-OO-programming-and-objects\"><a href=\"#4-OO-programming-and-objects\" class=\"headerlink\" title=\"4. OO programming and objects\"></a>4. <strong>OO programming and objects</strong></h3><h4 id=\"4-1-introduction\"><a href=\"#4-1-introduction\" class=\"headerlink\" title=\"4.1.introduction\"></a>4.1.introduction</h4><ul>\n<li><h5 id=\"What-is-OO-programming\"><a href=\"#What-is-OO-programming\" class=\"headerlink\" title=\"What is OO programming?\"></a><em>What is OO programming?</em></h5></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Constructing software systems which are structured collections(or sets) of classes.</p>\n<p>These classes produce instances called objects</p></blockquote>\n<ul>\n<li><h5 id=\"What-is-object\"><a href=\"#What-is-object\" class=\"headerlink\" title=\"What is object?\"></a><em><strong>What is object?</strong></em></h5><p>Objects are <em>things</em> or <em>nouns.</em></p>\n</li>\n<li><h5 id=\"Attributes-or-states-of-an-object\"><a href=\"#Attributes-or-states-of-an-object\" class=\"headerlink\" title=\"Attributes (or states) of an object:\"></a>Attributes (or states) of an object:</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>essentially anything that describes or quantifies an object. </p></blockquote>\n</li>\n<li><h5 id=\"Operations-or-behaviours-of-an-object\"><a href=\"#Operations-or-behaviours-of-an-object\" class=\"headerlink\" title=\"Operations (or behaviours) of an object:\"></a>Operations (or behaviours) of an object:</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>they mostly correspond to verbs in a requirements specification.</p></blockquote>\n</li>\n</ul>\n<p> The class defines the attributes and operations exposed by one or more related objects</p>\n<ul>\n<li><h5 id=\"What-is-a-class\"><a href=\"#What-is-a-class\" class=\"headerlink\" title=\"What is a class?\"></a><strong>What is a class?</strong></h5></li>\n</ul>\n<p>​     An object is an instance of a particular class, We can split up code between different objects.</p>\n<ul>\n<li><h5 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a><strong>UML</strong></h5><p>Class diagram notation</p>\n<p><strong>UML</strong> &#x3D; Unified Modelling Language</p>\n</li>\n</ul>\n<p><img src=\"java1/image-20220324140254211-1653819852852.png\" alt=\"java1/image-20220324140254211\"></p>\n<h4 id=\"4-2-Methods\"><a href=\"#4-2-Methods\" class=\"headerlink\" title=\"4.2.Methods\"></a>4.2.<strong>Methods</strong></h4><p><img src=\"java1/image-20220324135119144-1653819852852.png\" alt=\"java1/image-20220324135119144\"></p>\n<ul>\n<li><h5 id=\"syntax\"><a href=\"#syntax\" class=\"headerlink\" title=\"syntax\"></a>syntax</h5></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">modifiers returnType <span class=\"token function\">methodName</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nstatements<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"java1/image-20220602155836944.png\" alt=\"java1/image-20220602155836944\"></p>\n<p>A method uses parameters&#x3D;形参(formal parameter), whereas the caller passes arguments&#x3D;实参(actual parameter).</p>\n<ul>\n<li><h5 id=\"Calling-调用-a-method\"><a href=\"#Calling-调用-a-method\" class=\"headerlink\" title=\"Calling(调用) a method\"></a><strong>Calling(调用) a method</strong></h5></li>\n</ul>\n<p><img src=\"java1/image-20220324135158712-1653819852852.png\" alt=\"java1/image-20220324135158712\"></p>\n<p><img src=\"java1/image-20220602155849492.png\" alt=\"java1/image-20220602155849492\"></p>\n<p><img src=\"java1/image-20220324140705081-1653819852852.png\" alt=\"java1/image-20220324140705081\"></p>\n<ul>\n<li><h5 id=\"Pass-by-value（Pass-by-copy）\"><a href=\"#Pass-by-value（Pass-by-copy）\" class=\"headerlink\" title=\"Pass-by-value（Pass-by-copy）\"></a><strong>Pass-by-value</strong>（Pass-by-copy）</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在方法被调用时，实参通过形参把它的内容副本传入方法内部，此时形参接收到的内容是实参值的一个拷贝，因此在方法内对形参的任何操作，都仅仅是对这个副本的操作，不影响原始值的内容。</p></blockquote>\n</li>\n<li><h5 id=\"Method-Overloading\"><a href=\"#Method-Overloading\" class=\"headerlink\" title=\"Method Overloading\"></a><strong>Method Overloading</strong></h5><p>Java allows several methods to be defined with the same name, as long as they have different sets of parameters</p>\n<p>&#x3D;&#x3D;The return type is NOT used to differentiate methods&#x3D;&#x3D;</p>\n<p><img src=\"java1/image-20220324140852742-1653819852852.png\" alt=\"java1/image-20220324140852742\"></p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>只有参数类型有关,与返回值类型无关               </p></blockquote>\n<h4 id=\"4-3-Create-a-class\"><a href=\"#4-3-Create-a-class\" class=\"headerlink\" title=\"4.3.Create a class\"></a>4.3.Create a class</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>instance variable(成员变量)+instance method（成员方法）+constructors（构造方法）</p></blockquote>\n<p>attribute——instance variable    ， operation——instance method</p>\n<p><img src=\"java1/image-20220324141950832-1653819852852.png\" alt=\"java1/image-20220324141950832\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">XXX</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> attribute1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> attribute2<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//instance variable</span>\n   <span class=\"token function\">XXX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> xxx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   \n    <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">//constructors</span>\n    \n    <span class=\"token keyword\">double</span> <span class=\"token function\">opeartion1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">opeartion2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  \n    <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token comment\">//instance method</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><h5 id=\"create-a-object\"><a href=\"#create-a-object\" class=\"headerlink\" title=\"create a object\"></a>create a object</h5></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">className objectName<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">className</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>A  object is a reference variable.</strong> </p></blockquote>\n<ul>\n<li><h5 id=\"Using-instance-variables-and-methods\"><a href=\"#Using-instance-variables-and-methods\" class=\"headerlink\" title=\"Using instance variables and methods\"></a><strong>Using instance variables and methods</strong></h5></li>\n</ul>\n<p>– to access a (public) instance variable <strong>v</strong> of an object <strong>o</strong>, we reference it using the dot notation*:*</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">o<span class=\"token punctuation\">.</span>v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>– to invoke a (public) method <strong>m</strong> of an object <strong>o</strong>, we also reference it using the dot notation:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">o.m()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><h5 id=\"Constructors\"><a href=\"#Constructors\" class=\"headerlink\" title=\"Constructors\"></a><strong>Constructors</strong></h5>A constructor is a special method, with same name as the class name, used for initialisation.</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>It does not have a return type, not even <strong>void</strong>!</p></blockquote>\n<p> An empty no-argument constructor is provided for you by Java(如果没有自定义，系统会自带一个无参构造方法，如果自己写了构造方法，系统将不提供无参构造方法)。</p>\n<p><img src=\"java1/image-20220324143702216-1653819852852.png\" alt=\"java1/image-20220324143702216\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><h5 id=\"Data-Encapsulation-对成员变量封装\"><a href=\"#Data-Encapsulation-对成员变量封装\" class=\"headerlink\" title=\"Data Encapsulation(对成员变量封装)\"></a><strong>Data Encapsulation</strong>(对成员变量封装)</h5></li>\n</ul>\n<p>This is a good thing! Since objects are only accessible through well defined interfaces, ideally nothing unexpected should happen!</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>We should NOT allow direct access to an object’s variables.</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Any changes to the object’s state (i.e. its variables) should be made ONLY by that object’s methods</p></blockquote>\n<p>把成员变量定义加private，并且添加两个method实现访问和更改变量</p>\n<p>accessor(访问器)：get方法——getXxx()</p>\n<p>mutator(修改器)：set方法——setXxx()</p>\n<p>All getters and setters should have names that conform to the following:</p>\n<p>&#x3D;&#x3D;<strong>variableType getVariableName()</strong>&#x3D;&#x3D; </p>\n<p>&#x3D;&#x3D;<strong>void setVariableName(VariableType)</strong>&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><h5 id=\"this引用\"><a href=\"#this引用\" class=\"headerlink\" title=\"this引用\"></a>this引用</h5>this 是指向对象本身的引用名，利用this引用对象的instance variable</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不加this指代parameters, 加this指代instance variable</p></blockquote>\n<p>补充：this（）可以用来同类的另一个构造方法</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">Person(String nm) &#123;\n        name &#x3D; nm;\n    &#125;\nPerson(String nm, int a) &#123;\n        this(nm);\n        age &#x3D; a;\n    &#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><h5 id=\"toString-method\"><a href=\"#toString-method\" class=\"headerlink\" title=\"toString() method\"></a><strong>toString()</strong> <strong>method</strong></h5><p>This method returns a <strong>String</strong> representation of the object.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> “<span class=\"token class-name\">Account</span> number<span class=\"token operator\">:</span> ” <span class=\"token operator\">+</span> accNo <span class=\"token operator\">+</span> “\\n” \n<span class=\"token operator\">+</span> “<span class=\"token class-name\">Account</span> name<span class=\"token operator\">:</span> ” <span class=\"token operator\">+</span> accName <span class=\"token operator\">+</span> “\\n”\n<span class=\"token operator\">+</span> “<span class=\"token class-name\">Balance</span><span class=\"token operator\">:</span> ” <span class=\"token operator\">+</span> balance <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>它通常只是为了方便输出,在main中需要输出class的变量时，直接使用：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>classname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>等同于</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>classname<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"4-4-Method-parameters-、-local-variables、instance-variables\"><a href=\"#4-4-Method-parameters-、-local-variables、instance-variables\" class=\"headerlink\" title=\"4.4.Method parameters 、 local variables、instance variables\"></a>4.4.<strong>Method parameters 、 local variables、instance variables</strong></h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Method parameters are virtually the same as local variables!</p>\n<p>– They are declared inside the method.</p>\n<p>– They are valid (or in scope) only inside the method.</p>\n<p>– They are NOT initialised to the default value, and so must be initialised(by the caller of the method).必须初始化</p></blockquote>\n<ul>\n<li><h5 id=\"Initialisation（变量初始化）\"><a href=\"#Initialisation（变量初始化）\" class=\"headerlink\" title=\"Initialisation（变量初始化）\"></a><strong>Initialisation</strong>（变量初始化）</h5>Java automatically sets some initial values for you for variables of the class (instance variables), but not for variables in methods（local variable）</li>\n</ul>\n<p><img src=\"java1/image-20220602155920027.png\" alt=\"java1/image-20220602155920027\"></p>\n<p>class variable 也会自动初始化</p>\n<h2 id=\"Teaching-Block2\"><a href=\"#Teaching-Block2\" class=\"headerlink\" title=\"Teaching Block2\"></a>Teaching Block2</h2><h3 id=\"1-Arrays\"><a href=\"#1-Arrays\" class=\"headerlink\" title=\"1.Arrays\"></a>1.Arrays</h3><p>Arrays provide fast random access by letting you use an index position to get any element in the array.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Arrays must be given a size! </p>\n<p>Standard arrays cannot grow and shrink in size</p></blockquote>\n<img src=\"C:\\Users\\zzh\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220328202318852.png\" alt=\"image-20220328202318852\" style=\"zoom:50%;\" />\n\n<p>静态初始化：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int[] arr&#x3D;&#123;1,2,3&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>动态初始化：</p>\n<p>只指定数组的长度</p>\n<p><img src=\"java1/image-20220328203135408-1653819852852.png\" alt=\"java1/image-20220328203135408\"></p>\n<ul>\n<li><p>An array is an object, even though it may be an array of primitives.</p>\n</li>\n<li><p>Array elements can be either primitives or objects.</p>\n</li>\n<li><p>The main() method has the Array of <strong>String</strong>s.</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>数组的长度：array.length(是一个整形)</p>\n<p>如果length&#x3D;3 （length&#x2F;2&#x3D;1）注意在for循环里出现！</p>\n<p>动态初始化一个对象数组时，new后面是类名（只是表示这个reference variable什么类型）并不是构造方法。</p>\n<h4 id=\"1-1-copy-array\"><a href=\"#1-1-copy-array\" class=\"headerlink\" title=\"1.1.copy array\"></a>1.1.copy array</h4><p>reference copy: Only copies the reference value!</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> racers2<span class=\"token punctuation\">;</span>\n\nracers2 <span class=\"token operator\">=</span> racers<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>copy the data type variables:</p>\n<ol>\n<li><p>Use a loop to copy all individual elements.</p>\n</li>\n<li><p>Use the static <strong>arraycopy</strong> method in the <strong>System</strong> class</p>\n</li>\n</ol>\n<p><img src=\"java1/image-20220328203620636-1653819852852.png\" alt=\"java1/image-20220328203620636\"></p>\n<p><strong>src</strong> is the array to copy from; <strong>dest</strong> is the array to copy to</p>\n<p>• <strong>srcPos</strong> is where in the <strong>src</strong> array to start copying from.</p>\n<p>• <strong>destPos</strong> is where, in the <strong>dest</strong> array, to start putting the newly copied </p>\n<p>elements</p>\n<h4 id=\"1-2-Passing-Arrays-to-Methods\"><a href=\"#1-2-Passing-Arrays-to-Methods\" class=\"headerlink\" title=\"1.2.Passing Arrays to Methods\"></a>1.2.<strong>Passing Arrays to Methods</strong></h4><p>Java uses pass-by-value, to pass arguments to a method(only have pass by value)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Java passes (to the method) a copy of the reference variable to the array object </p>\n<p>数组作为方法参数—传递地址</p></blockquote>\n<h4 id=\"1-3-“Prep-code”\"><a href=\"#1-3-“Prep-code”\" class=\"headerlink\" title=\"1.3.“Prep code”\"></a>1.3.“Prep code”</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A form of pseudocode, to help focus on the logic without the worry of syntax</p></blockquote>\n<h3 id=\"2-String\"><a href=\"#2-String\" class=\"headerlink\" title=\"2.String\"></a>2.String</h3><p>java 中的所有双引号中都为字符串。</p>\n<p>不是基本的数据类型。</p>\n<ul>\n<li><p>string 特点：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>String对象不可变 Strings are <strong>immutable</strong></p>\n<p>但是如下代码是可以执行的（因为“java”创建的是对象，“java”内容不能改变，但是下方代码意思是s这个引用类型的变量指向新的对象“html”）</p></blockquote>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">;</span>\ns<span class=\"token operator\">=</span><span class=\"token string\">\"html\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>不能改变s的值</p>\n<p><strong>String Pool</strong>: Area of memory where <strong>String</strong> literals are put by the JVM when created</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Garbage Collector</strong> doesn’t cleanup the String Pool!</p></blockquote>\n<p>JVM doesn’t create a duplicate if there’s already a <strong>String</strong> in memory with </p>\n<p>the same value; it refers the reference variable to the existing entry</p>\n<p>JVM不会创建相同值的string，只会使引用变量指向这个字符串</p>\n<ul>\n<li><p>string构造方法：</p>\n<p><img src=\"java1/image-20220602155938368.png\" alt=\"java1/image-20220602155938368\"></p>\n</li>\n<li><p>两种创建字符串的方法以及内存分析：</p>\n<p>通过new创建对象，每次都会申请一个新的内存空间。</p>\n<p>以”“创建对象如果内容一样，则jvm只会创建一个String对象</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> st1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>ch2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">String</span> st2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>ch2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>st1<span class=\"token operator\">==</span>st2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//new构建时，st1与st2地址不同</span>\n  \n       <span class=\"token class-name\">String</span> st3<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">String</span> st4<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span>\n       <span class=\"token class-name\">System</span> <span class=\"token punctuation\">.</span>out <span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>st3<span class=\"token operator\">==</span>st4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">//直接赋值时，st3与st4的地址相同</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<ul>\n<li>&#96;&#96;&#96;java<br>&#x2F;&#x2F;运行结果为true false<br>String s1 &#x3D; “AB”;<br>String s2 &#x3D; “AB”;<br>String s3 &#x3D; new String(“AB”);<br> System.out.println(s1 &#x3D;&#x3D; s2);<br> System.out.println(s1 &#x3D;&#x3D; s3);<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n    由于常量池中不存在两个相同的对象，所以s1和s2都是指向JVM字符串常量池中的&quot;AB&quot;对象。new关键字一定会产生一个对象，并且这个对象存储在堆中。所以String s3 &#x3D; new String(“AB”);产生了两个对象：保存在栈中的s3和保存堆中的String对象。\n\n   ![java1&#x2F;image-20220602155952465](java1&#x2F;image-20220602155952465.png)\n\n   这是因为通过构造方法（new）创建字符串对象时，该对象位于heap上\n\n    而使用“”创建时，该字符串位于String Pool(通过＋组合时也是如此)\n\n   ![java1&#x2F;image-20220602160005972](java1&#x2F;image-20220602160005972.png)\n\n   &gt; GC不会清理String pool，但是可以清理new出的在堆中的string\n\n**Methods:** **String** **Class**\n\n- 字符串的比较\n\n![java1&#x2F;image-20220331213600524](java1&#x2F;image-20220331213600524-1653819852852.png)\n\n&#96;&#96;&#96;java\nstring1.equals(string2)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<ul>\n<li><p>字符串相加：</p>\n<p>Java overloads the <strong>+</strong> operator for string concatenations.</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>输出 aaa11<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>输出 aaa2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>字符串转字符</li>\n</ul>\n<p><img src=\"java1/image-20220331214741862-1653819852852.png\" alt=\"java1/image-20220331214741862\"></p>\n<ul>\n<li><p>字符串长度</p>\n<p><img src=\"java1/image-20220331214828665-1653819852852.png\" alt=\"java1/image-20220331214828665\"></p>\n<ul>\n<li><p><strong>char charAt(int index)</strong>: returns the character at <strong>index</strong></p>\n</li>\n<li><p><strong>int indexOf(ch)</strong>: returns <strong>ch</strong>’s first occurrence position; if not found returns <strong>-1</strong>.</p>\n<p><img src=\"java1/image-20220511225550273-1653819852852.png\" alt=\"java1/image-20220511225550273\"></p>\n</li>\n<li><p><strong>int compareTo(str)</strong>: compares two strings, returns &lt; ,&gt; , &#x3D;0 if the compared string is smaller, larger, or equal to <strong>str</strong>. </p>\n</li>\n<li><p><strong>substring(index1,index2)</strong>: returns the substring between <strong>index1</strong>and (excluding) <strong>index2</strong>.</p>\n</li>\n<li><p><strong>concat(s)</strong>: concatenates（连接） two strings.</p>\n</li>\n<li><p><strong>toUpperCase()</strong> <strong>&#x2F;</strong> <strong>toLowerCase()</strong>: convert all characters in string to upper&#x2F;lower case</p>\n</li>\n<li><p><strong>toString()</strong>: convert input to a string.</p>\n</li>\n<li><pre><code class=\"java\">double d = 12.3;\nString dString = Double.toString(d); // dString = “12.3”\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n- **void getChars(i,j,A,k)**: returns characters from **i** to **j** (excluding), and stores them into array* **A** starting from **A[k]**.\n\n- &#96;&#96;&#96;java\n  char[] A &#x3D; new char[4];\n  “The rain in Spain”.getChars(4,8,A,0);\n  &#x2F;&#x2F; A &#x3D; &#123;’r’,’a’,’i’,’n’&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n **substring(index)**: returns substring from **index** to end.\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> “<span class=\"token class-name\">Monkeys</span>”<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s = “keys”</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> “<span class=\"token class-name\">Monkeys</span>”<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>”<span class=\"token class-name\">Monkeys</span>”<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// s = “key”</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\nreplace(oldCh,newCh)**: replace **oldCh by **newCh** everywhere in the string.\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> “goose”<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>‘o’<span class=\"token punctuation\">,</span>‘e’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//s = “geese”</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</code></pre>\n</li>\n<li><p><strong>split(String s)</strong>: splits the string around matches of the given regular expression <strong>s</strong> and returns an array with those substrings</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsingSplit</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"bar:foo:bar\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> splitStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> splitStr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>splitStr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>OUTPUT:</p>\n<p>bar</p>\n<p>foo</p>\n<p>bar</p>\n</li>\n<li><p><strong>void getChars(i,j,A,k)</strong>: returns characters from <strong>i</strong> to <strong>j</strong> (excluding), and stores them into <em>array</em> <strong>A</strong> starting from <strong>A[k]</strong></p>\n</li>\n<li><p><strong>substring(index)</strong>: returns substring from <strong>index</strong> to end.</p>\n</li>\n<li><p><strong>replace(oldCh,newCh)</strong>: replace <strong>oldCh</strong> by <strong>newCh</strong> everywhere in the </p>\n<p>string</p>\n</li>\n</ul>\n</li>\n</ul>\n<p> <strong>Format Specifier</strong></p>\n<p>The following table shows the format specifiers:</p>\n<p>format() 函数与数字，字符结合使用:</p>\n<p><code>^</code> 、 <code>&lt;</code> 、 <code>&gt;</code> 分别是居中、左对齐、右对齐，后面带宽度</p>\n<p><code>:</code> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p>\n<p><code>+</code> 表示数学中的正负号，在正数前显示<code>+</code>，负数前显示<code>-</code>； （空格）表示在正数前加空格</p>\n<p><code>b、d、o、x</code> 分别是二进制、十进制、八进制、十六进制。</p>\n<p><img src=\"java1/image-20220502165204192-1653819852853.png\" alt=\"java1/image-20220502165204192\"></p>\n<table>\n<thead>\n<tr>\n<th>Format Specifier</th>\n<th>Conversion Applied</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%a %A</td>\n<td>Floating-point hexadecimal</td>\n</tr>\n<tr>\n<td>%b %B</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>Decimal integer</td>\n</tr>\n<tr>\n<td>%h %H</td>\n<td>Hash code of the argument</td>\n</tr>\n<tr>\n<td>%e %E</td>\n<td>Scientific notation</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>Decimal floating-point</td>\n</tr>\n<tr>\n<td>%g %G</td>\n<td>Uses %e or %f, whichever is shorter</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>Octal integer</td>\n</tr>\n<tr>\n<td>%n</td>\n<td>Inserts a newline character</td>\n</tr>\n<tr>\n<td>%s %S</td>\n<td>String</td>\n</tr>\n<tr>\n<td>%t %T</td>\n<td>Time and date</td>\n</tr>\n<tr>\n<td>%x %X</td>\n<td>Integer hexadecimal</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>Inserts a % sign</td>\n</tr>\n</tbody></table>\n<p>format() 函数与参数结合使用</p>\n<p>格式化字段将会被 format() 中的参数替换</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫&#123;&#125;,今年&#123;&#125;!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫&#123;0&#125;,今年&#123;1&#125;!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫&#123;1&#125;,今年&#123;0&#125;!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n我叫张三<span class=\"token punctuation\">,</span>今年<span class=\"token number\">22</span><span class=\"token operator\">!</span>\n我叫张三<span class=\"token punctuation\">,</span>今年<span class=\"token number\">22</span><span class=\"token operator\">!</span>\n我叫<span class=\"token number\">22</span><span class=\"token punctuation\">,</span>今年张三<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"StringTokenizer-Class\"><a href=\"#StringTokenizer-Class\" class=\"headerlink\" title=\"StringTokenizer Class\"></a><strong>StringTokenizer</strong> <strong>Class</strong></h4><p>The <strong>StringTokenizer</strong> class is used to extract tokens and process text from a string, and it belongs to the <strong>java.util</strong> package.</p>\n<p><strong>StringTokenizer</strong> is a legacy class; should <strong>not</strong> be used with new code,用 <strong>String.split()</strong></p>\n<h3 id=\"3-StringBuilder\"><a href=\"#3-StringBuilder\" class=\"headerlink\" title=\"3.StringBuilder\"></a>3.StringBuilder</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可变字符串</p></blockquote>\n<ul>\n<li>构造方法</li>\n</ul>\n<p><img src=\"java1/image-20220331214451117-1653819852853.png\" alt=\"java1/image-20220331214451117\"></p>\n<ul>\n<li><p>添加和反转</p>\n<p><img src=\"java1/image-20220331214902678-1653819852853.png\" alt=\"java1/image-20220331214902678\"></p>\n<p><img src=\"java1/image-20220331214948952-1653819852853.png\" alt=\"java1/image-20220331214948952\"></p>\n<p>返回值是本身的类，所以可以链式编程</p>\n</li>\n<li><p>与String的转换</p>\n<img src=\"C:\\Users\\弓长洲赤赤\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220331215055566.png\" alt=\"image-20220331215055566\" style=\"zoom:80%;\" /></li>\n</ul>\n<h3 id=\"4-ArrayList\"><a href=\"#4-ArrayList\" class=\"headerlink\" title=\"4.ArrayList\"></a>4.<strong>ArrayList</strong></h3><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p>\n<p>ArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入 ArrayList 类</span>\n\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> objectName <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>　 <span class=\"token comment\">// 初始化</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>E: 泛型数据类型，用于设置 objectName 的数据类型，<strong>只能为引用数据类型</strong>。</p></blockquote>\n<h4 id=\"4-1-Some-ArrayList-methods\"><a href=\"#4-1-Some-ArrayList-methods\" class=\"headerlink\" title=\"4.1.Some ArrayList methods\"></a>4.1.<strong>Some</strong> <strong>ArrayList</strong> <strong>methods</strong></h4><p>常用的method：</p>\n<p><img src=\"java1/image-20220331210922022-1653819852853.png\" alt=\"java1/image-20220331210922022\"></p>\n<p><img src=\"java1/image-20220331210908240-1653819852853.png\" alt=\"java1/image-20220331210908240\"></p>\n<p> Find out if it contains something:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> inIt <span class=\"token operator\">=</span> myList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Find out where in the list something is:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> myList<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Find out if the list is empty:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> empty <span class=\"token operator\">=</span> myList<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>ArrayList字符串遍历的基本格式：</p>\n<p><img src=\"java1/image-20220331211646251-1653819852853.png\" alt=\"java1/image-20220331211646251\"></p>\n<h3 id=\"5-Inheritance-and-Abstract-classes\"><a href=\"#5-Inheritance-and-Abstract-classes\" class=\"headerlink\" title=\"5.Inheritance and Abstract classes\"></a>5.<strong>Inheritance and Abstract classes</strong></h3><h4 id=\"5-1-two-primary-types-of-relationships-between-classes\"><a href=\"#5-1-two-primary-types-of-relationships-between-classes\" class=\"headerlink\" title=\"5.1.two primary types of relationships between classes\"></a>5.1.two primary types of relationships between classes</h4><p>– aggregation (referred as has-a)</p>\n<p>– inheritance (referred as is-a)</p>\n<h4 id=\"5-2-Inheritance\"><a href=\"#5-2-Inheritance\" class=\"headerlink\" title=\"5.2.Inheritance\"></a>5.2.<strong>Inheritance</strong></h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>via the <strong>extends</strong> keyword</p></blockquote>\n<p><img src=\"java1/image-20220602160040255.png\" alt=\"java1/image-20220602160040255\"></p>\n<p> Subclasses inherit the properties (attributes and operations(方法和成员变量)) of their superclass.</p>\n<p><img src=\"java1/image-20220602160049960.png\" alt=\"java1/image-20220602160049960\"></p>\n<p>To provide specialisations, subclasses &#x3D;&#x3D;override&#x3D;&#x3D; methods that they inherit from the superclass</p>\n<p>父类的私有数据域在子类中仍是不能访问的。java中只支持单一继承。</p>\n<p>构造方法不会被继承</p>\n<p><strong>Access Modifiers</strong>（可访问修饰符）</p>\n<p><img src=\"java1/image-20220405151242251-1653819852853.png\" alt=\"java1/image-20220405151242251\"></p>\n<ul>\n<li><strong>public</strong></li>\n</ul>\n<p>– <strong>public</strong> instance variables and methods are inherited</p>\n<p>• <strong>protected</strong></p>\n<p>– <strong>protected</strong> instance variables and methods are inherited</p>\n<p>• <strong>private</strong></p>\n<p>– any <strong>private</strong> instance variables and methods</p>\n<p>are not inherited and cannot be seen by the subclass</p>\n<p>default: 不加任何修饰符</p>\n<p>方法、变量四种都可以加</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>普通类（外部类）：只能用public、default（不写）、abstract、final修饰。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>（成员）内部类：可理解为外部类的成员，所以修饰类成员的public、protected、default、private、static等关键字都能使用。</p></blockquote>\n<h5 id=\"5-2-1-override\"><a href=\"#5-2-1-override\" class=\"headerlink\" title=\"5.2.1.override\"></a>5.2.1.override</h5><p>要与父类方法声明一模一样</p>\n<p><img src=\"java1/image-20220405145140022-1653819852853.png\" alt=\"java1/image-20220405145140022\"></p>\n<p>方法重写时建议加注解@Override以区分是否为重写还是新子类方法</p>\n<p><img src=\"java1/image-20220405145224830-1653819852853.png\" alt=\"java1/image-20220405145224830\"></p>\n<p><img src=\"java1/image-20220405145331663-1653819852853.png\" alt=\"java1/image-20220405145331663\"></p>\n<h5 id=\"5-2-2-super的使用\"><a href=\"#5-2-2-super的使用\" class=\"headerlink\" title=\"5.2.2.super的使用\"></a>5.2.2.super的使用</h5><p>Every object holds both its own declared instance variables and everything from its superclasses.</p>\n<p>super用于指代父类，可以调用父类中的普通方法和构造方法</p>\n<p>调用普通方法类似于this的语法：super.方法名（参数）；</p>\n<p>调用父类的构造方法</p>\n<p><img src=\"java1/image-20220405153854142-1653819852853.png\" alt=\"java1/image-20220405153854142\"></p>\n<p>每个子类构造方法执行的&#x3D;&#x3D;第一步&#x3D;&#x3D;都为隐式调用（先访问父类的无参构造方法）所以每个父类一定要重载无参构造方法。if no constructor is provided, the compiler adds one that looks like:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>this指本类，super指代父类。</p>\n<p><img src=\"java1/image-20220602160107277.png\" alt=\"java1/image-20220602160107277\"></p>\n<p>5.2.3.成员方法访问的特点</p>\n<p><img src=\"java1/image-20220602160116092.png\" alt=\"java1/image-20220602160116092\"></p>\n<h5 id=\"5-2-4-final和static关键字\"><a href=\"#5-2-4-final和static关键字\" class=\"headerlink\" title=\"5.2.4.final和static关键字\"></a>5.2.4.final和static关键字</h5><ul>\n<li>final可以修饰方法、变量、类</li>\n</ul>\n<p><img src=\"java1/image-20220602160124588.png\" alt=\"java1/image-20220602160124588\"></p>\n<p> Using this keyword will prevent child classes   (oranyone else) modifying the variable&#x2F;method this applies to</p>\n<p>final修饰的变量必须初始化（常量），不能被改变。</p>\n<p>在使用final修饰基本类型变量的时候，不可以对基本类型变量重新赋值，所以的话，基本类型变量不能被改变，可是对于引用类型变量来说的话，它保存的仅仅是一个引用，final只保证这个引用类型变量所引用的地址不会改变，也就是一直引用同一个对象，但这个对象完全可以发生改变。</p>\n<p>如果final修饰数组那么数组的内容可以改变，但是不能重新为这个reference variable分配新数组对象了</p>\n<p><strong>final</strong> variables must either be initialised when declared or in the constructor</p>\n<p><img src=\"java1/image-20220602160137226.png\" alt=\"java1/image-20220602160137226\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>任意一个对象给a赋值之后所有对象共享a的值。</p>\n<p><strong>All instances</strong> of the same <strong>class</strong> share one copy of an static variable.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Initialisation of static variables</strong> happens before any object of the class </p></blockquote>\n<p>is created</p>\n<p>一般对static修饰的变量访问时使用</p>\n<p>类名.变量名&#x3D;xxxx;</p>\n<p>类名.方法名（）</p>\n<p>使用类名对此变量统一赋值。</p>\n<p>static修饰方法：（静态方法可以被继承，不能被重写）</p>\n<p><img src=\"java1/image-20220602160147324.png\" alt=\"java1/image-20220602160147324\"></p>\n<p><strong>Static Imports</strong>(调用方法时不用写类名了)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token static\">out</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WithStaticImports</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\nout<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>“square root is “ <span class=\"token operator\">+</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">修饰符</th>\n<th align=\"left\">修饰变量</th>\n<th>修饰方法</th>\n<th>修饰类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">static</td>\n<td align=\"left\">整个类都可以访问，直接用类名访问</td>\n<td>静态方法，不可被重写</td>\n<td>\\</td>\n</tr>\n<tr>\n<td align=\"left\">final</td>\n<td align=\"left\">不可更改（常量）</td>\n<td>不能被重写</td>\n<td>最终类，不可被继承</td>\n</tr>\n</tbody></table>\n<h3 id=\"6-polymorphism\"><a href=\"#6-polymorphism\" class=\"headerlink\" title=\"6.polymorphism\"></a><strong>6.polymorphism</strong></h3><p>Polymorphism ：Using a single definition (superclass) with different types (subclass)</p>\n<p>（父类变量指向子类对象）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Creature</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rabbit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<img src=\"image-20220602160210836.png\" alt=\"image-20220602160210836\" style=\"zoom:80%;\" />\n\n<img src=\"image-20220602160234560.png\" alt=\"image-20220602160234560\" style=\"zoom:67%;\" />\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">object o<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token function\">student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中object是o的声明类，student是o的实际类，o调用方法时由实际类型决定。</p>\n<p>访问时要先看左边（声明类）中有无此变量或对象，如果有才可以执行。</p>\n<p>执行方法时执行的是右边（实际类）的重写方法，执行变量时是执行声明类中的变量。</p>\n<p>多态中的对象转换：</p>\n<p><img src=\"java1/image-20220602160247779.png\" alt=\"java1/image-20220602160247779\"></p>\n<p>向上转型</p>\n<p>object o&#x3D;new student();</p>\n<p>向下转换（强制）– Explicit cast</p>\n<p>student b&#x3D;(student)o;</p>\n<h4 id=\"6-1-java的object类中常用方法：\"><a href=\"#6-1-java的object类中常用方法：\" class=\"headerlink\" title=\"6.1.java的object类中常用方法：\"></a>6.1.java的object类中常用方法：</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>java.lang.Object</strong> is the ultimate parent of <strong>EVERY</strong> class in java</p></blockquote>\n<p><strong>Some methods of the “object” class</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>equals()</strong> determines when one object is equal to another</p></blockquote>\n<p>未重写：判断两类的地址是否相同</p>\n<p>在类中重写equals()判断两个类内容是否相等。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>toString()</strong> allows objects to be printed</p></blockquote>\n<p>输出：类名@加地址</p>\n<p>重写toString()打印类中信息</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>hashCode()</strong> is a unique ID for every object, usually based on its memory address</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>getClass()</strong> returns the class of the object返回类名</p></blockquote>\n<h3 id=\"7-abstract-class\"><a href=\"#7-abstract-class\" class=\"headerlink\" title=\"7.abstract class\"></a>7.abstract class</h3><p>The compiler will not let you instantiate an <strong>abstract</strong> class.</p>\n<p>– The only use it has is in being extended</p>\n<p> A non-abstract class is called a concrete class.</p>\n<p>• <strong>abstract</strong> in terms of classes  that class must be extended, in </p>\n<p>order to be instantiated</p>\n<p>• <strong>abstract</strong> for methods   the method must be overridden in the </p>\n<p>child class</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>subclass must implement ALL abstract methods from its superclass (or be declared <strong>abstract</strong>).</p></blockquote>\n<p><img src=\"java1/image-20220602160301686.png\" alt=\"java1/image-20220602160301686\"></p>\n<p>抽象方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"java1/image-20220602160309267.png\" alt=\"java1/image-20220602160309267\"></p>\n<p><img src=\"java1/image-20220602160318509.png\" alt=\"java1/image-20220602160318509\"></p>\n<h3 id=\"8-inner-class\"><a href=\"#8-inner-class\" class=\"headerlink\" title=\"8.inner class\"></a>8.<em>inner class</em></h3><ul>\n<li>Inner (or <em>Nested</em>) Class: Standard class declared within the scope of a standard top-level (or <em>enclosing</em>) class</li>\n</ul>\n<p><img src=\"java1/image-20220602160331304.png\" alt=\"java1/image-20220602160331304\"></p>\n<ul>\n<li>An <em>inner class</em> is defined in the scope of an outer class.</li>\n</ul>\n<p> (An instance of) it can reference data and methods (even private ones) of the <em>outer class</em> it belongs to.</p>\n<p><img src=\"java1/image-20220602160346623.png\" alt=\"java1/image-20220602160346623\"></p>\n<p><img src=\"java1/image-20220602160359496.png\" alt=\"java1/image-20220602160359496\"></p>\n<p><img src=\"java1/image-20220602160408113.png\" alt=\"java1/image-20220602160408113\"></p>\n<ul>\n<li>An instance of an inner class (i.e. an <em>inner object</em>) must be associated with a specific outer object on the heap!</li>\n<li></li>\n</ul>\n<p><img src=\"java1/image-20220602160422782.png\" alt=\"java1/image-20220602160422782\"></p>\n<p><img src=\"java1/image-20220602160435539.png\" alt=\"java1/image-20220602160435539\"></p>\n<p>An anonymous class is a special kind of class: a <em>local class without a</em> <em>name</em>.</p>\n<p><img src=\"java1/image-20220602160447672.png\" alt=\"java1/image-20220602160447672\"></p>\n<p>• only one instance of the class can ever be made;</p>\n<p>• class can’t be accessed from anywhere else in the program</p>\n<p> It allows an object to be created using an expression that <em>combines</em> object creation with the declaration of the class.</p>\n<p>An anonymous class is defined as <em>part of a new expression</em> and <em>must</em>be a subclass or implement an interface.（必须是子类或者接口的实现）</p>\n<p>– The class body can define methods but cannot define any constructors.</p>\n<p><img src=\"java1/image-20220602160513949.png\" alt=\"java1/image-20220602160513949\"></p>\n<p>匿名内部类，在【创建对象】的时候，只能使⽤唯⼀⼀次。</p>\n<p>如果希望多次创建对象，⽽且类的内容⼀样的话，那么就需要使⽤单独定义的实现类了。</p>\n<p>匿名对象，在【调⽤⽅法】的时候，只能调⽤唯⼀⼀次。</p>\n<p>如果希望同⼀个对象，调⽤多次⽅法，那么必须给对象起个名字。</p>\n<p>匿名内部类是省略了【实现类&#x2F;⼦类名称】，但是匿名对象是省略了【对象名称】</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>强调：匿名内部类和匿名对象不是⼀回事！！！</p></blockquote>\n<h3 id=\"9-Debugger\"><a href=\"#9-Debugger\" class=\"headerlink\" title=\"9.Debugger\"></a>9.Debugger</h3><p> Compilation or syntactical errors: easiest type of error to debug</p>\n<p> Logic errors: occur during the program’s execution.</p>\n<p> <em>runtime errors</em> &amp; <em>threading errors</em></p>\n<h2 id=\"Teaching-Block3\"><a href=\"#Teaching-Block3\" class=\"headerlink\" title=\"Teaching Block3\"></a>Teaching Block3</h2><h3 id=\"1-interface\"><a href=\"#1-interface\" class=\"headerlink\" title=\"1.interface\"></a>1.interface</h3><p>接口是一种与类类似的结构，只能包含常量和抽象方法。</p>\n<p>无构造方法</p>\n<ul>\n<li>Before Java SE8, interfaces could have:</li>\n<li>static final 位置可换！！</li>\n</ul>\n<p>constant fields (public static final可以省略)(引用时使用父类接口作为前缀<strong>Father.age</strong>)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>abstract</strong> methods （public abstract可以省略）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>From Java SE8, interfaces can also have:</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>default</strong> methods  Allow developers to add new functionality to interfaces, without impacting any existing classes that are already implementing the interface.用了default关键字修饰方法之后，这个方法是可以有方法体</p></blockquote>\n<p>&#x3D;&#x3D;Can be overridden in the class that implements the interface.&#x3D;&#x3D;Provide backward compatibility(向后兼容) for existing interfaces.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>static</strong> methods  Allow developers to define utility methods in the interface也可以具有方法体（不可被重写）与类中加static一样均可用 接口名.方法名 调用</p></blockquote>\n<p><img src=\"java1/image-20220602160537759.png\" alt=\"java1/image-20220602160537759\"></p>\n<p>接口中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>类实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> className <span class=\"token keyword\">implements</span> interfaceName<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"java1/image-20220416114202044-1653819852853.png\" alt=\"java1/image-20220416114202044\"></p>\n<p>接口不能利用new实例化，所以必须通过类继承接口后，实例化类间接实现接口实例化</p>\n<p><img src=\"java1/image-20220602160610929.png\" alt=\"java1/image-20220602160610929\"></p>\n<p>Java’s “multiple inheritance” is <em>at interface level</em> only!(可以利用接口实现Java中的多继承)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> className <span class=\"token keyword\">implements</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Only interfaces can do multiple inheritance</p>\n<p><img src=\"java1/image-20220602160619631.png\" alt=\"java1/image-20220602160619631\"></p>\n<p><img src=\"java1/image-20220602160627123.png\" alt=\"java1/image-20220602160627123\"></p>\n<p>多继承中如果发生两个父类有相同方法：</p>\n<ul>\n<li><p><em>Same named methods</em>:</p>\n<p>If they have different parameters, then <strong>Child</strong> interface has both (this is same as <em>overloading</em>).</p>\n</li>\n</ul>\n<p>​    If they differ by only return type, then <em>error</em>.</p>\n<p>​    If the two methods are identical, only keep one.</p>\n<ul>\n<li><p><em>Same named constants</em>:</p>\n<p>we keep both constants. To refer to them, <em>use parent interface name</em> as prefix</p>\n</li>\n</ul>\n<h3 id=\"2-Garbage-Collection\"><a href=\"#2-Garbage-Collection\" class=\"headerlink\" title=\"2.Garbage Collection\"></a>2.Garbage Collection</h3><ul>\n<li><strong>Two main areas of memory in Java</strong>:</li>\n</ul>\n<p>– (Garbage-collectible) Heap (where <strong>objects</strong> live);</p>\n<p>– Stack (where <strong>local variables</strong> and <strong>methods,</strong> when called, live)</p>\n<h4 id=\"2-1-四种变量的存储位置：\"><a href=\"#2-1-四种变量的存储位置：\" class=\"headerlink\" title=\"2.1.四种变量的存储位置：\"></a>2.1.四种变量的存储位置：</h4><p>&#x3D;&#x3D;Local (<em>also known as</em> stack) variables (on the <em>Stack</em>)&#x3D;&#x3D; </p>\n<p>• Variables declared in a method and method parameters.</p>\n<p>• Temporary variables, alive only when the method they belong to is on the <em>Stack</em></p>\n<p>&#x3D;&#x3D;Instance variables (on the <em>Heap</em>)&#x3D;&#x3D;</p>\n<p>• Variables declared in a class (<strong>not</strong> inside of a method).</p>\n<p>• Live inside the object they belong to</p>\n<p>&#x3D;&#x3D;Object reference <strong>(non-primitive）</strong> variables:&#x3D;&#x3D;</p>\n<p>– Hold a reference to an object, not the actual object.</p>\n<p>– A local variable that is a reference to an object goes on the <em>Stack</em> (the object it refers to still goes on the <em>Heap</em>).</p>\n<p>&#x3D;&#x3D;类变量和实例变量：&#x3D;&#x3D;</p>\n<p> A class variable is created when the <em>class</em> is created, rather than when an <em>object</em> is created</p>\n<p>To declare a class variable, use the modifier <strong>static</strong>.</p>\n<p>If you declare something as <em>static</em>, it means that all objects have the <strong>same</strong> copy of that </p>\n<p>variable&#x2F;method（见block2）</p>\n<p>• Static is <em>like global variables</em> but applies classwide.</p>\n<p>• Static methods <em>become available when the class is loaded</em> (created), not </p>\n<p>when you make an instance of it.</p>\n<p><img src=\"java1/image-20220511203936802-1653819852853.png\" alt=\"java1/image-20220511203936802\"></p>\n<hr>\n<h4 id=\"2-2-Methods-and-the-Stack\"><a href=\"#2-2-Methods-and-the-Stack\" class=\"headerlink\" title=\"2.2.Methods and the Stack\"></a>2.2.<strong>Methods and the Stack</strong></h4><p> Method goes on top of the <em>Stack</em> when it is called and stays in the <em>Stack</em> until it’s done </p>\n<p><strong>Stack frame</strong>(栈帧):</p>\n<p>– What actually is pushed onto the <em>Stack</em>.</p>\n<p>– Contains the state of the method </p>\n<p>(which line of code is executing and values of all local variables).</p>\n<p>每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机里面从入栈到出栈的过程。</p>\n<p><img src=\"java1/image-20220602160643492.png\" alt=\"java1/image-20220602160643492\"></p>\n<h4 id=\"2-3-Object-References\"><a href=\"#2-3-Object-References\" class=\"headerlink\" title=\"2.3.Object References\"></a>2.3.<strong>Object References</strong></h4><p>Object reference <strong>(<strong><em>aka</em> non-primitive</strong>)</strong> variables:</p>\n<p>– Hold a reference to an object, not the actual object.</p>\n<p>– A local variable that is a reference to an object goes on the <em>Stack</em> (the object it refers to still goes on the <em>Heap</em>).</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>reference variable是一个局部变量所以就在stack上，但是其指向的对象在heap上</p></blockquote>\n<h4 id=\"2-4-构造函数链-constructor-chaining\"><a href=\"#2-4-构造函数链-constructor-chaining\" class=\"headerlink\" title=\"2.4.构造函数链 constructor chaining\"></a>2.4.构造函数链 constructor chaining</h4><p> When an object is created, that object will have “layers” of itself representing each superclass.</p>\n<p>拥有父类的层次和自己的层次</p>\n<p><img src=\"java1/image-20220602160654651.png\" alt=\"java1/image-20220602160654651\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>When a new object is created, all the constructors in its inheritance tree must be run.</p>\n<p>An object is only completely formed when all the superclass parts of itself are formed</p></blockquote>\n<h4 id=\"2-5-Life-of-Objects-and-Variables\"><a href=\"#2-5-Life-of-Objects-and-Variables\" class=\"headerlink\" title=\"2.5.Life of Objects and Variables\"></a>2.5.<strong>Life of Objects and Variables</strong></h4><p>• Life of an object:</p>\n<p> depends only on the life of reference variables referring to it.</p>\n<p>– Object is <strong>alive</strong> (or <strong>dead</strong>) if its reference is <strong>alive</strong> (or <strong>dead</strong>).</p>\n<p>• Variable lifetime:</p>\n<p>– same for primitive and reference variables;</p>\n<p>– different for local and instance variables</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>local variables</strong>: live only within the method that declared it</p>\n<p> Is <strong>alive</strong> as long as its <em>Stack</em> frame is on the <em>Stack</em></p>\n<p><strong>instance variables</strong>: live for as long as object they belong to lives.</p></blockquote>\n<h4 id=\"2-6-GC（简单介绍）\"><a href=\"#2-6-GC（简单介绍）\" class=\"headerlink\" title=\"2.6.GC（简单介绍）\"></a>2.6.GC（简单介绍）</h4><p>Objects in Java are <em>dynamically</em> allocated and created <em>on demand</em>:</p>\n<p>– memory space for an object is allocated at <em>runtime</em>, not at <em>compile time</em>;</p>\n<p>– the <strong>new</strong> statement causes the memory for an object to be allocated</p>\n<p> (similar to the <strong>C</strong> <strong>malloc()</strong> function)</p>\n<p>java不会内存泄漏，因为有GC动态调整存储空间</p>\n<p>If an object has only one reference to it and the <em>Stack</em> frame holding it gets popped off the <em>Stack</em>, then the object is now abandoned in the <em>Heap</em>.</p>\n<p>如果没有引用变量指向一个对象，那么这个对象将被GC回收</p>\n<p><strong>Making an Object Eligible for GC</strong>：</p>\n<p>(1) The reference goes out of scope, permanently.</p>\n<p>(2) The reference is assigned to another object.</p>\n<p>(3) The reference is explicitly set to <strong>null</strong>.</p>\n<p><strong>Setting a reference variable to</strong> <strong>null</strong> (it means <strong>no object</strong>)</p>\n<ul>\n<li>finalizer（终结方法）：The opposite of a Java constructor is a finalizer; it can sometimes be used for the <em>cleanup</em> of an object.</li>\n</ul>\n<h3 id=\"3-常用类\"><a href=\"#3-常用类\" class=\"headerlink\" title=\"3.常用类\"></a>3.常用类</h3><h4 id=\"3-1-Math类\"><a href=\"#3-1-Math类\" class=\"headerlink\" title=\"3.1.Math类\"></a>3.1.Math类</h4><h5 id=\"3-1-1方法（全部为类方法）\"><a href=\"#3-1-1方法（全部为类方法）\" class=\"headerlink\" title=\"3.1.1方法（全部为类方法）\"></a>3.1.1方法（全部为类方法）</h5><p><img src=\"java1/image-20220511214937944-1653819852853.png\" alt=\"java1/image-20220511214937944\"></p>\n<p><img src=\"java1/image-20220420205927974-1653819852853.png\" alt=\"java1/image-20220420205927974\"></p>\n<p>Math类中成员方法没有意义，所以没有成员方法</p>\n<p>Math类不能实例化</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>• <strong>Classes</strong> that can’t be instantiated: </p>\n<p>– <strong>Abstract classes</strong> and <strong>interfaces</strong>.</p>\n<p>– Classes with <strong>private constructors</strong>.</p>\n<p>Only code inside the class can invoke a private constructor!</p></blockquote>\n<p><img src=\"java1/image-20220602160740267.png\" alt=\"java1/image-20220602160740267\"></p>\n<p>Math类设计如上：不能实例化</p>\n<h5 id=\"3-1-2利用static-final定义变量\"><a href=\"#3-1-2利用static-final定义变量\" class=\"headerlink\" title=\"3.1.2利用static final定义变量\"></a>3.1.2利用static final定义变量</h5><p>– Variables that are <strong>static</strong> and <strong>final</strong> cannot be changed.</p>\n<p>习惯变量名全大写</p>\n<p><strong>Initialisation</strong> of <strong>static final</strong> variables（两种初始化方法）:</p>\n<p>– When the variable is <strong>declared</strong>.</p>\n<p>– In a <strong>static initialiser</strong>: block of code that runs when a class is loaded, before any code can use the class.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> BAR_SIGN<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\nBAR_SIGN <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"3-2-Random-Class\"><a href=\"#3-2-Random-Class\" class=\"headerlink\" title=\"3.2.Random Class\"></a>3.2.<strong>Random</strong> <strong>Class</strong></h4><p>The <strong>Random</strong> class is part of the <strong>java.util</strong> package and provides methods that generate random numbers.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandTest</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">Random</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> aRandomFloat <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">nextFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> aRandomInt <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A random float is \"</span> <span class=\"token operator\">+</span> aRandomFloat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A random int is \"</span> <span class=\"token operator\">+</span> aRandomInt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n<h4 id=\"3-3-包装类-Wrapper-Classes\"><a href=\"#3-3-包装类-Wrapper-Classes\" class=\"headerlink\" title=\"3.3.包装类(Wrapper Classes)\"></a>3.3.包装类(<strong>Wrapper Classes</strong>)</h4><p>把基本数据类型包装成类</p>\n<p> used when a variable of a primitive type needs to be treated as an object.</p>\n<p>Wrapper classes are part of <strong>java.lang</strong> package no need to import them:</p>\n<p><img src=\"java1/image-20220420211438457-1653819852853.png\" alt=\"java1/image-20220420211438457\"></p>\n<p>注意除了int和char其余均为首字母大写</p>\n<p>基本数据类型与字符串的转换：</p>\n<p><img src=\"java1/image-20220602160757574.png\" alt=\"java1/image-20220602160757574\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token function\">parssInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"3-2-1装箱、拆箱（Wrapping-versus-Unwrapping）\"><a href=\"#3-2-1装箱、拆箱（Wrapping-versus-Unwrapping）\" class=\"headerlink\" title=\"3.2.1装箱、拆箱（Wrapping versus Unwrapping）\"></a>3.2.1装箱、拆箱（<strong>Wrapping</strong> <em>versus</em> <strong>Unwrapping</strong>）</h5><p><img src=\"java1/image-20220420212052011-1653819852853.png\" alt=\"java1/image-20220420212052011\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> iWrapped <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> unWrapped <span class=\"token operator\">=</span> iWrapped<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Autoboxing</strong>自动装箱（包装类和基本数据类型等效使用）</p>\n<p>automatic wrapping ： conversion from primitive type to wrapper object is automatic!</p>\n<p>体现在：</p>\n<ul>\n<li><p>Method Arguments</p>\n<p>you can pass either a reference or a matching primitive to a method that takes in a wrapper type; reverse is also true!</p>\n</li>\n<li><p>Return Values</p>\n<p>you can return either a reference or a matching </p>\n<p>primitive on a method with a primitive return type; reverse is also true!</p>\n</li>\n<li><p>Boolean Expressions</p>\n<p>where a boolean value is expected, you can use </p>\n<p>either an expression evaluating to a boolean, a primitive or a matching </p>\n<p>wrapper.</p>\n</li>\n<li><p>Operations on Numbers</p>\n<p>in operations where a primitive type is expected, you can use a wrapper type!</p>\n</li>\n<li><p>Assignments</p>\n<p>a variable declared as a wrapper (or primitive) can be assigned a matching wrapper (or </p>\n<p>primitive)</p>\n</li>\n<li><p>All wrapper classes are subclasses of the <strong>Number</strong> abstract class (part of the <strong>java.lang</strong> package)</p>\n</li>\n</ul>\n<p>we can construct a <strong>Number</strong> object of type <strong>Integer</strong>:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Number</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> Often used when manipulating collections of numbers.</p>\n<ul>\n<li>Subclasses of <strong>Number</strong> provide constants to, e.g. represent the upper and lower</li>\n</ul>\n<p>bounds of the corresponding data type (<strong>MIN_VALUE</strong> and <strong>MAX_VALUE</strong>, </p>\n<p>respectively)</p>\n<h4 id=\"3-3-Scanner-Class\"><a href=\"#3-3-Scanner-Class\" class=\"headerlink\" title=\"3.3.Scanner Class\"></a>3.3.<strong>Scanner</strong> <strong>Class</strong></h4><ul>\n<li><strong>Scanner</strong> class (of <strong>java.util</strong> package) allows a <em>word</em> to be specified as a delimiter（分隔符）</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> “<span class=\"token class-name\">Let</span> your heart guide you<span class=\"token punctuation\">.</span>”<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Scanner</span> myScanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyScanner<span class=\"token punctuation\">.</span><span class=\"token function\">useDelimiter</span><span class=\"token punctuation\">(</span>“you”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>myScanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myScanner<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Output is …</p>\n<p>Let</p>\n<p>r heart guide</p>\n<ul>\n<li><p>Scanning primitive type values: several methods can be used to obtain a token with a primitive data type value</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"1 10 100 1000\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Scanner</span> myScanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>myScanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> sum <span class=\"token operator\">+=</span> myScanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum = \"</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>Reading console input</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter an int value: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scanner</span> myScanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> myScanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"4-Recursion\"><a href=\"#4-Recursion\" class=\"headerlink\" title=\"4.Recursion\"></a>4.Recursion</h3><p><strong>Methods that call themselves</strong>, directly or indirectly</p>\n<p>需要Stop condition</p>\n<ul>\n<li>brings additional overhead to programs:</li>\n</ul>\n<p> Everytime a program calls a recursive method, space needs to be assigned for the method’s local variables and parameters.  Extra memory required + time to manage the extra space</p>\n<h2 id=\"Teaching-Block4\"><a href=\"#Teaching-Block4\" class=\"headerlink\" title=\"Teaching Block4\"></a>Teaching Block4</h2><h3 id=\"1-GUI\"><a href=\"#1-GUI\" class=\"headerlink\" title=\"1.GUI\"></a>1.GUI</h3><p><strong>GUI</strong>: Method for interacting with a computer via the manipulation of text, images and “widgets”.</p>\n<p>使用awt和swing</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">java<span class=\"token punctuation\">.</span>awt\njavax<span class=\"token punctuation\">.</span>swing<span class=\"token comment\">//Javax表示扩展包</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-1-3-main-concepts\"><a href=\"#1-1-3-main-concepts\" class=\"headerlink\" title=\"1.1.  3 main concepts:\"></a>1.1.  <em>3 main concepts</em>:</h4><p>– Component: An <em>object</em> that the user can see on the screen and can also interact with.</p>\n<p>– Container: A <em>component</em> that can hold other components.</p>\n<p>– Event: An <em>action</em> triggered by the user (e.g. pressing a key, clicking a mouse button).</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><em>Containers</em>: objects capable of containing other Componentobjects.</p>\n<p><em>Components</em>: single entities with no <em>containment</em> abilities. </p></blockquote>\n<p>二者都是抽象类</p>\n<h4 id=\"1-2-两种容器：\"><a href=\"#1-2-两种容器：\" class=\"headerlink\" title=\"1.2.两种容器：\"></a>1.2.两种容器：</h4><p>• <em>Top-level Containers</em>: At least one of these containers <em>must</em> be present in any Swing application. </p>\n<p>顶层容器是进行图形编程的基础，一切图形化的东西都必须包括在顶层容器中。顶层容器是任何图形界面程序都要涉及的主窗口，是显示并承载组件的容器组件。</p>\n<p>• <em>General-purpose Containers</em>:Found in most Swing applications. </p>\n<p>中间容器是容器组件的一种，也可以承载其他组件，但中间容器不能独立显示，必须依附于其他的顶层容器</p>\n<p><img src=\"java1/image-20220602160826785.png\" alt=\"java1/image-20220602160826785\"></p>\n<h4 id=\"1-3-awt包：\"><a href=\"#1-3-awt包：\" class=\"headerlink\" title=\"1.3.awt包：\"></a>1.3.awt包：</h4><p>The <strong>java.awt</strong> package contains most of the classes needed to create GUI applications and Applets in Java.</p>\n<p>几种其中的类：</p>\n<p>– Container Classes: Graphical <em>widgets</em> capable of containing collections of other graphical widgets (i.e. <strong>Panel</strong>, <strong>Window</strong>, <strong>Dialog</strong>and <strong>Frame</strong>).</p>\n<p>– Component Classes: Atomic graphical widgets like <strong>Button</strong>, <strong>Menu</strong>and <strong>List</strong>. </p>\n<p>– Layout Manager Classes: Control the layout of component objects on&#x2F;in container objects.</p>\n<p>– Primitive Graphics Classes: Control and access primitive graphics like <strong>Point</strong>, <strong>Rectangle</strong> and <strong>Polygon</strong>. </p>\n<p>– Event Handling Classes: Deal with events received from the GUI and other system items.</p>\n<p>– Listener Classes: Receive events from graphical components and act on them</p>\n<ul>\n<li>制作GUI步骤：</li>\n</ul>\n<ol>\n<li>Make a frame: create an instance of <strong>JFrame</strong></li>\n<li>Make a widget (e.g. make a button or text field)</li>\n<li>Add the widget to the frame</li>\n<li>Display the frame: must <em>give it a size</em> and <em>make it visible</em></li>\n</ol>\n<h4 id=\"1-4-Containers（主要用swing）\"><a href=\"#1-4-Containers（主要用swing）\" class=\"headerlink\" title=\"1.4.Containers（主要用swing）\"></a><strong>1.4.Containers</strong>（主要用swing）</h4><p>常用的containers包括：<strong>JDialog JFrame JPanel ScrollPane</strong>等等</p>\n<h5 id=\"1-4-1-JFrame窗体（基础）\"><a href=\"#1-4-1-JFrame窗体（基础）\" class=\"headerlink\" title=\"1.4.1.JFrame窗体（基础）\"></a>1.4.1.<strong>JFrame</strong>窗体（基础）</h5><p>JFrame 是 Swing 组件的顶层容器，该类继承了 AWT 的 Frame 类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JFrame</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FrameDemo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JFrame</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">FrameDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EBU4201 Demo JFrame\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token class-name\">FrameDemo</span> myFrame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FrameDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>You can extend Frame in your program (more common),or instantiate the Frame class in your own class (less common) to build a basic GUI. </p>\n</li>\n<li><p>通常在frame类中定义好组件，在main中实例化</p>\n</li>\n<li><p>未调用方法设置时，JFrame大小为0，且不可见</p>\n</li>\n<li><p>当创建一个 JFrame 类的实例化对象后，其他组件并不能够直接放到容器上面，需要将组件添加至&#x3D;&#x3D;内容窗格&#x3D;&#x3D;，而不是直接添加至 JFrame 对象。示例代码如下：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">frame<span class=\"token punctuation\">.</span><span class=\"token function\">getContentPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"java1/image-20220602160846933.png\" alt=\"java1/image-20220602160846933\"></p>\n<ul>\n<li>常用的API方法:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法签名</th>\n<th>方法功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setLocation(int x, int y)</td>\n<td>设置组件的位置。</td>\n</tr>\n<tr>\n<td>setSize(int width, int height)</td>\n<td>设置组件的大小。</td>\n</tr>\n<tr>\n<td>setBounds(int x, int y, int width, int height)</td>\n<td>同时设置组件的位置、大小。</td>\n</tr>\n<tr>\n<td>setVisible(Boolean b):</td>\n<td>设置该组件的可见性。</td>\n</tr>\n<tr>\n<td>setTitle(String s);</td>\n<td>设置标题栏</td>\n</tr>\n<tr>\n<td><strong>setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</strong></td>\n<td>设置窗口关闭</td>\n</tr>\n</tbody></table>\n<ul>\n<li>添加组件的方法：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法签名</th>\n<th>方法功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Component add(Component comp)</td>\n<td>向容器中添加其他组件 (该组件既可以是普通组件，也可以是容器) ， 并返回被添加的组件 。</td>\n</tr>\n<tr>\n<td>Component getComponentAt(int x, int y):</td>\n<td>返回指定点的组件 。</td>\n</tr>\n<tr>\n<td>int getComponentCount():</td>\n<td>返回该容器内组件的数量 。</td>\n</tr>\n<tr>\n<td>Component[] getComponents():</td>\n<td>返回该容器内的所有组件 。</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><em>add两次相同的控件后，会把前面的自动取消掉</em></p></blockquote>\n<h4 id=\"1-5-Event-handle-事件处理\"><a href=\"#1-5-Event-handle-事件处理\" class=\"headerlink\" title=\"1.5.Event handle(事件处理)\"></a>1.5.Event handle(事件处理)</h4><ul>\n<li><p>A (user) <em>event</em> is triggered any time when some sort of defined signal is received by the program. </p>\n</li>\n<li><p>An event is generated by external user actions</p>\n</li>\n<li><p>.*表示该包内所有引用类</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span>*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>You need an <strong>listener</strong>（监听器） and a <strong>source</strong>（源） for each <strong>event</strong></li>\n</ul>\n<p>​     一个事件源可以拥有多个事件监听器</p>\n<ul>\n<li><p><strong>Listener Interface</strong>: the <em>bridge</em> between the listener (the user code) and the event source (e.g. the button).</p>\n</li>\n<li><p><strong>Event source</strong>: object that can turn user actions (e.g. click a mouse, close a window) into events.</p>\n</li>\n<li><p>Every event type has a matching listener interface：</p>\n</li>\n</ul>\n<p><img src=\"java1/image-20220602160922914.png\" alt=\"java1/image-20220602160922914\"></p>\n<ul>\n<li><p>创建event handle步骤：</p>\n<p>1.首先创建事件源组件对象（比如按钮）；</p>\n<p>2.自定义类，实现XxxListener接口，重写方法；Implement the <strong>ActionListener</strong> interface:</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ActionListener</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>​     3.调用事件源组件对象的addXxxListener方法完成&#x3D;&#x3D;注册监听&#x3D;&#x3D;Register with the widget: </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">someComponent<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span>instanceOfMyClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//通常直接用this代指</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>​     4.重写监听接口中的actionPerformed（e）方法 Define the event-handling method:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">actionPerformed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// code that reacts to the action ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>​    举例：</p>\n<ul>\n<li>方法一：相当于把程序所在类当成了监听类</li>\n</ul>\n<p><img src=\"java1/image-20220602160937169.png\" alt=\"java1/image-20220602160937169\"></p>\n<ul>\n<li><p>方法二：使用匿名内部类：</p>\n<p>不用写implement</p>\n</li>\n</ul>\n<p>​      deal with <em>multiple</em> event sources:</p>\n<ol>\n<li><p>Register each widget with the required listener and then determine which widget generated the event.</p>\n</li>\n<li><p>Use an <em>anonymous inner class</em> for each event source.</p>\n</li>\n<li><p>Use a specialised <em>inner class</em> for each event source.</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">minusButton<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ActionListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">actionPerformed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         label<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>方法三：使用内部类：在主界面的类中不实现接口，而是在内部类中实现</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">someComponent<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> innerclassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p><img src=\"java1/image-20220602161000360.png\" alt=\"java1/image-20220602161000360\"></p>\n<p>  <img src=\"java1/image-20220602161027187.png\" alt=\"java1/image-20220602161027187\"></p>\n<p>原理：例如，如果鼠标单击了按钮对象 Button，则该按钮 Button 就是事件源，而 Java 运行时系统会自动生成 ActionEvent 类的对象 ActionEvent，该对象中描述了单击事件发生时的一些信息。之后，事件监听器对象将接收由 Java 运行时系统传递过来的事件对象 ActionEvent，并进行相应的处理。</p>\n<p><img src=\"java1/image-20220602161039631.png\" alt=\"java1/image-20220602161039631\"></p>\n<h4 id=\"1-6-常用component：\"><a href=\"#1-6-常用component：\" class=\"headerlink\" title=\"1.6.常用component：\"></a>1.6.常用component：</h4><p>添加component的方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">myFrame<span class=\"token punctuation\">.</span><span class=\"token function\">getContentPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"1-6-1JLabel\"><a href=\"#1-6-1JLabel\" class=\"headerlink\" title=\"1.6.1JLabel:\"></a>1.6.1<strong>JLabel</strong>:</h5><p> component that you can put text into.</p>\n<p>When creating a label, you can specify the initial value and the alignment （对齐方式）you wish to use within the label.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">JLabel</span> myLabel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JLabel</span><span class=\"token punctuation\">(</span>“text”<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JLabel</span><span class=\"token punctuation\">.</span>RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"1-6-2-JButton\"><a href=\"#1-6-2-JButton\" class=\"headerlink\" title=\"1.6.2 JButton\"></a>1.6.2 JButton</h5><p> extends <strong>Component</strong>, displays a string and delivers an <strong>ActionEvent</strong> for each mouse click.</p>\n<p>– Normally buttons are displayed with a <em>border</em>. </p>\n<p>– In addition to text, <strong>JButtons</strong> can also display icons</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">JButton</span> myButton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JButton</span><span class=\"token punctuation\">(</span>“text”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p>常用组件的<a href=\"https://cloud.tencent.com/developer/article/1732496\">介绍</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">组件名称</th>\n<th align=\"left\">定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">JButton</td>\n<td align=\"left\">代表Swing按钮，按钮可以带一些图片或文字</td>\n</tr>\n<tr>\n<td align=\"left\">JCheckBox</td>\n<td align=\"left\">代表Swing中的复选框组件</td>\n</tr>\n<tr>\n<td align=\"left\">JComboBox</td>\n<td align=\"left\">代表Swing下拉列表框，可以在下拉显示区域显示多个选项</td>\n</tr>\n<tr>\n<td align=\"left\">JFrame</td>\n<td align=\"left\">代表Swing的框架类</td>\n</tr>\n<tr>\n<td align=\"left\">JDialog</td>\n<td align=\"left\">代表Swing版本的对话框</td>\n</tr>\n<tr>\n<td align=\"left\">JLabel</td>\n<td align=\"left\">代表Swing中的标签组件</td>\n</tr>\n<tr>\n<td align=\"left\">JRadioButton</td>\n<td align=\"left\">代表Swing单选按钮</td>\n</tr>\n<tr>\n<td align=\"left\">JList</td>\n<td align=\"left\">代表能够在用户界面中显示一系列条目的组件</td>\n</tr>\n<tr>\n<td align=\"left\">JTextField</td>\n<td align=\"left\">代表文本框</td>\n</tr>\n<tr>\n<td align=\"left\">JPasswordField</td>\n<td align=\"left\">代表密码框</td>\n</tr>\n<tr>\n<td align=\"left\">JTextArea</td>\n<td align=\"left\">代表Swing中的文本区域</td>\n</tr>\n<tr>\n<td align=\"left\">JOptionPane</td>\n<td align=\"left\">代表Swing中的一些对话框</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-6-Layout\"><a href=\"#1-6-Layout\" class=\"headerlink\" title=\"1.6.Layout\"></a>1.6.<strong>Layout</strong></h4><p><strong>Layout Manager</strong>: An interface that defines methods for positioning and sizing objects within a container.</p>\n<p>在java.awt包中</p>\n<p>Java defines several default implementations of <strong>LayoutManager</strong>. </p>\n<ul>\n<li><p>JFrame默认使用BorderLayout管理其内部组件布局;</p>\n</li>\n<li><p>JPanel默认使用FlowLayout管理其内部组件布局；</p>\n</li>\n<li><p>JScrollPane 默认使用 BorderLayout 管理其内部组件布局； </p>\n<p><strong>Geometrical placement in a Container</strong> is controlled by a <strong>LayoutManager</strong> object.</p>\n<p>设置Frame为最佳大小(打开窗口就为这么大不用resize)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">frame<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p><strong>Layouts</strong> allow you to format components on the screen in a platformindependent way.</p>\n<p>– <strong>FlowLayout</strong></p>\n<p>– <strong>GridLayout</strong></p>\n<p>– <strong>BorderLayout</strong></p>\n<p>Step 1: Create the layout.</p>\n<p>Step 2: Invoke the <strong>setLayout()</strong> method on the container to use the new layout.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">JPanel</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPanel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">setLayout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>or</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">JPanel</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JPanel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"1-6-1-FlowLayout\"><a href=\"#1-6-1-FlowLayout\" class=\"headerlink\" title=\"1.6.1.FlowLayout\"></a>1.6.1.<strong>FlowLayout</strong></h5><p>is the default layout for the <strong>JPanel</strong> class. </p>\n<p>– If the screen is resized, the components’ flow will change based on the new width and height.</p>\n<p>屏幕resize时，每行按钮个数会变，但是按钮大小不会变</p>\n<p>When you add components to the screen, they flow left to right(centered), based on the order added and the width of the screen. </p>\n<p>– Constructors: </p>\n<p>• FlowLayout()</p>\n<p>• FlowLayout(int align)</p>\n<p>• FlowLayout(int align, int hgap, int vgap)</p>\n<p>!<img src=\"FlowLayout-1653819852853.jpg\"></p>\n<h5 id=\"1-6-2-GridLayout\"><a href=\"#1-6-2-GridLayout\" class=\"headerlink\" title=\"1.6.2.GridLayout\"></a>1.6.2.<strong>GridLayout</strong></h5><table>\n<thead>\n<tr>\n<th>构造方法</th>\n<th>方法功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FlowLayout()</td>\n<td>使用默认 的对齐方式及默认的垂直间距、水平间距创建 FlowLayout 布局管理器。</td>\n</tr>\n<tr>\n<td>FlowLayout(int align)</td>\n<td>使用指定的对齐方式及默认的垂直间距、水平间距创建 FlowLayout 布局管理器。</td>\n</tr>\n<tr>\n<td>FlowLayout(int align,int hgap,int vgap)</td>\n<td>使用指定的对齐方式及指定的垂直问距、水平间距创建FlowLayout 布局管理器。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>GridLayout</strong> arranges components in rows or columns:</li>\n</ul>\n<p>– If number of rows is specified, the number of columns will be the number of components divided by the rows.（组件数除行数）</p>\n<p>– If number of columns is specified, the number of rows will be the number of components divided by the columns.（组件数除列数）</p>\n<p>GridLayout 布局管理器将容器分割成纵横线分隔的网格 ， 每个网格所占的区域大小相同。当向使用 GridLayout 布局管理器的容器中添加组件时， 默认从左向右、 从上向下依次添加到每个网格中 。</p>\n<p> 与 FlowLayout不同的是，放置在 GridLayout 布局管理器中的各组件的大小由组件所处的区域决定(每个组件将自动占满整个区域) 。    </p>\n<p>也就是说当窗口resize时，每行每列按钮个数不变，大小会随着屏幕改变</p>\n<p>– Constructors: </p>\n<p>• GridLayout():default of 1 column per component, in a single row. </p>\n<p>• GridLayout(int rows, int cols) </p>\n<p>• GridLayout(int rows, int cols, int hgap, int vgap) </p>\n<h5 id=\"1-6-3-BorderLayout\"><a href=\"#1-6-3-BorderLayout\" class=\"headerlink\" title=\"1.6.3.BorderLayout\"></a>1.6.3.<strong>BorderLayout</strong></h5><table>\n<thead>\n<tr>\n<th>构造方法</th>\n<th>方法功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BorderLayout()</td>\n<td>使用默认的水平间距、垂直 间距创建 BorderLayout 布局管理器 。</td>\n</tr>\n<tr>\n<td>BorderLayout(int hgap,int vgap):</td>\n<td>使用指定的水平间距、垂直间距创建 BorderLayout 布局管理器。</td>\n</tr>\n</tbody></table>\n<p>如果不往某个区域中放入组件，那么该区域不会空白出来，而是会被其他区域占用</p>\n<p><img src=\"java1/image-20220602161102960.png\" alt=\"java1/image-20220602161102960\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">frame<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"西侧按钮\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BorderLayout</span><span class=\"token punctuation\">.</span>WEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"南侧按钮\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BorderLayout</span><span class=\"token punctuation\">.</span>SOUTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北侧按钮\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BorderLayout</span><span class=\"token punctuation\">.</span>NORTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中间按钮\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BorderLayout</span><span class=\"token punctuation\">.</span>CENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"1-7-Three-types-of-graphics-in-GUI\"><a href=\"#1-7-Three-types-of-graphics-in-GUI\" class=\"headerlink\" title=\"1.7.Three types of graphics in GUI\"></a>1.7.<strong>Three types of graphics in GUI</strong></h4><h5 id=\"1-7-1-Graphics-class\"><a href=\"#1-7-1-Graphics-class\" class=\"headerlink\" title=\"1.7.1.Graphics class:\"></a>1.7.1.<strong>Graphics</strong> class:</h5><p>Java graphics are based on <em>pixels</em> (small dot on the screen that can be accessed).像素</p>\n<p> A <em>pixel</em> is identified by a pair of numbers(<em>coordinates</em>) starting at zero, (x,y):</p>\n<p><img src=\"java1/image-20220602161114516.png\" alt=\"java1/image-20220602161114516\"></p>\n<p>• x &#x3D; horizontal position (increases left to right)</p>\n<p>• y &#x3D; vertical position (increases top to bottom)</p>\n<p><img src=\"java1/image-20220515104354341-1653819852853.png\" alt=\"java1/image-20220515104354341\"></p>\n<p><strong>Step 1</strong>: Make a paintable widget.</p>\n<p>• Create subclass of <strong>JPanel</strong> &amp; override the <strong>paintComponent()</strong> method.</p>\n<p>• Put all the graphics code in the <strong>paintComponent()</strong> method.</p>\n<p>• The <strong>paintComponent()</strong> method is called only by the JVM; the <em>programmer does not call it</em>!</p>\n<p>• It takes a <strong>Graphics</strong> object – drawing canvas for what is displayed on the screen</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDrawingPanel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JPanel</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">paintComponent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"java1/image-20220515104815143-1653819852853.png\" alt=\"java1/image-20220515104815143\"></p>\n<p><img src=\"java1/image-20220515104825449-1653819852853.png\" alt=\"java1/image-20220515104825449\"></p>\n<p><img src=\"java1/image-20220515104942497-1653819852853.png\" alt=\"java1/image-20220515104942497\"></p>\n<h5 id=\"1-7-2-Graphics2D-Class\"><a href=\"#1-7-2-Graphics2D-Class\" class=\"headerlink\" title=\"1.7.2.Graphics2D Class\"></a>1.7.2.<strong>Graphics2D</strong> <strong>Class</strong></h5><p><img src=\"java1/image-20220515105324652-1653819852853.png\" alt=\"java1/image-20220515105324652\"></p>\n<h5 id=\"1-7-3-Color-Class\"><a href=\"#1-7-3-Color-Class\" class=\"headerlink\" title=\"1.7.3.Color Class\"></a>1.7.3.<strong>Color</strong> <strong>Class</strong></h5><p>Java has a <strong>Color</strong> class.</p>\n<ul>\n<li>To define the colour of an object, you can directly use the static colour variables of the <strong>Color</strong>class.</li>\n</ul>\n<p><img src=\"java1/image-20220602161131822.png\" alt=\"java1/image-20220602161131822\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">paintComponent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Graphics</span> g<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// g object becomes red</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">drawLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// draw a red line</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>• You can also set your own colour by choosing an RGB value:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Color</span> myColor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"java1/image-20220515105915729-1653819852853.png\" alt=\"java1/image-20220515105915729\"></p>\n<h3 id=\"2-Exception-Handling\"><a href=\"#2-Exception-Handling\" class=\"headerlink\" title=\"2.Exception Handling\"></a>2.<strong>Exception Handling</strong></h3><ul>\n<li>Some causes of error situations:</li>\n</ul>\n<p>– Incorrect implementation </p>\n<p>– Inappropriate object request</p>\n<p>– Inconsistent or inappropriate object state</p>\n<ul>\n<li><p>programming errors</p>\n<p>– Trying to access an array out of bounds </p>\n<p> this throws an <strong>ArrayIndexOutOfBoundsException</strong> runtime error.</p>\n<p>– Attempting to divide by zero </p>\n<p>this throws an <strong>ArithmeticException</strong>runtime error</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Exception: an object that signals to the calling code, the occurrence of an unusual condition.</p>\n<p>Exceptions are <em>objects</em>, subclasses of **java.lang.Exception **class</p></blockquote>\n<h4 id=\"2-1-Checked-versus-Unchecked-Exceptions\"><a href=\"#2-1-Checked-versus-Unchecked-Exceptions\" class=\"headerlink\" title=\"2.1.Checked versus Unchecked Exceptions\"></a>2.1.<strong>Checked</strong> <strong>versus</strong> <strong>Unchecked Exceptions</strong></h4><p>异常的分类：<img src=\"java1/image-20220602161147594.png\" alt=\"java1/image-20220602161147594\"></p>\n<p>Throwable类是所有异常的根</p>\n<p>异常可以分为：系统错误、异常、运行时异常。</p>\n<ol>\n<li><p>系统错误（Error）、运行时异常（runtime exception）被称作免检异常（Unchecked exception）Unchecked exceptions: </p>\n<p>– Subclasses of <strong>RuntimeException</strong>. </p>\n<p>– Used for unanticipated failures.</p>\n<p>– Where recovery is unlikely.</p>\n<ul>\n<li><p>Some exceptions thrown by Java class libraries are called <em>run-time</em> <em>exceptions</em></p>\n<p>当出现这样的异常时，总是由虚拟机接管（提供好现成的异常对象）。</p>\n<p>比如：我们从来没有人去处理过NullPointerException异常，它就是运行时异常，并且这种异常还是最常见的异常之一。</p>\n</li>\n<li><p>Java does not force client code to catch run-time exceptions (also called <em>unchecked exceptions</em>), because: </p>\n</li>\n<li><p>不强制要求写免检异常的捕获</p>\n<p>– Run-time exceptions can occur so frequently that the cost of checking by the compiler would be very big.</p>\n<p>– You <em>can</em> catch them if you believe there is ever likely to be a problem.</p>\n<p>– Ideally, you should instead check input pre-conditions first!</p>\n<p><img src=\"java1/image-20220602161203238.png\" alt=\"java1/image-20220602161203238\"></p>\n</li>\n</ul>\n</li>\n<li><p>其他异常都为必检异常（checked exception）</p>\n<p>Checked exceptions: </p>\n<p>– Subclasses of <strong>Exception</strong>. </p>\n<p>– Used for anticipated failures.</p>\n<p>– Where recovery may be possible.</p>\n<p>编译器会强制程序员检查并处理必检异常</p>\n</li>\n</ol>\n<h4 id=\"2-2-Run-Time-Error-Handling\"><a href=\"#2-2-Run-Time-Error-Handling\" class=\"headerlink\" title=\"2.2.Run-Time Error Handling\"></a>2.2.<strong>Run-Time Error Handling</strong></h4><p>Run-time programming errors are the most difficult to deal with</p>\n<p>There’s <em>no support</em> given at <em>programming language level</em> for catching and managing errors in most languages.</p>\n<p>Using exceptions enables potential <em>run-time</em> problems to be noticed at <em>compile time</em></p>\n<p><img src=\"java1/image-20220517204741685-1653819852853.png\" alt=\"java1/image-20220517204741685\"></p>\n<ul>\n<li><p><strong>throws&#x2F;throw</strong></p>\n<p>抛出异常（不处理）</p>\n<ol>\n<li><p>throw:抛出异常的关键字</p>\n<p>When writing code, we can <em>throw</em> exceptions, and thus force any clients that use it to <em>catch</em> these exceptions.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XXXXException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"错误信息\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>XXXXException必须为系统封装过的类，或者利用自己创建的其子类</p>\n</li>\n<li><p>throws:声明异常的关键字</p>\n<p>不管这个方法中是否有throw语句，只要这个方法中调用过抛出异常的方法，就要给这个方法加throws（调用链中的每一层都要加）</p>\n<p>表明此方法可能会抛出某个异常（抛没抛还得看throw的条件）</p>\n<p>用于&#x3D;&#x3D;方法&#x3D;&#x3D;头：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">XXXExceotion</span><span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">XXXExceotion1</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">XXXExceotion2</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">XXXExceotion3</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//多个异常</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Javadoc documentation syntax to indicate that method <em>throws</em> an exception: @throws ExceptionType reason</p></blockquote>\n<p>you <em>don’t</em> want to catch exceptions, but want client code to <em>handle</em> them</p>\n<p>当编写类的人不打算处理一个异常，只是抛出此异常留给写实现类的人去处理</p>\n<p>in this case, you should declare that your method <strong>throws</strong> them</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"java1/image-20220602161223587.png\" alt=\"java1/image-20220602161223587\"></p>\n<ul>\n<li><p><strong>try&#x2F;catch</strong> <strong>Block</strong></p>\n<p>捕获 异常并处理（需要有异常被抛出）</p>\n<p>When a program is run, the JVM will attempt to execute each statement in the <strong>try</strong> block in turn.</p>\n<p>If any statement <strong>throws</strong> <strong>an</strong> <em>exception</em> then either:</p>\n<p>– the <strong>catch</strong> block corresponding to this exception will be executed; </p>\n<p>– the method in which this code lies will itself throw the exception</p>\n<p>如果使用系统jvm默认异常处理方式时：</p>\n<p>先从try内部开始执行，直到出现异常（此时会自动生成一个默认异常类对象，并提交给系统，而系统运行时接受到异常，从catch中找匹配的异常类，然后进行异常处理）</p>\n<p>如果使用自己建的异常类（try中某个有异常的方法在声明时必须抛出异常）。</p>\n<p>A <strong>try&#x2F;catch</strong> section can also have a <strong>finally</strong> section, usually to <em>tidy up</em> afterwards</p>\n<p>无论是否发生异常，finally 代码块中的代码总会被执行。在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// code that can throw exceptions E1, ..., En</span>\n<span class=\"token comment\">// ...protect one or more statements here</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E1</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// code to handle exception E1</span>\n<span class=\"token comment\">// ...report and recover from the exception here</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">En</span> en<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// code to handle exception En</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// perform any actions here that are common, regardless of whether or not an exception is thrown</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果一个方法声明了一个必检异常，则必须使用try-catch中调用处理，或者声明要用用throws抛出</p></blockquote>\n<h4 id=\"2-3-Creating-Exception-Classes\"><a href=\"#2-3-Creating-Exception-Classes\" class=\"headerlink\" title=\"2.3.Creating Exception Classes\"></a>2.3.<strong>Creating Exception Classes</strong></h4><p>Java programmers can create their own exception classes.</p>\n<p>构建一些Java不认为是异常的异常</p>\n<p>比如：-100岁</p>\n<p><strong>User exception classes</strong> are like any other class, but they must extend the <strong>Exception</strong> class.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call constructor of parent Exception</span>\n     <span class=\"token comment\">// other appropriate code</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call constructor of parent Exception</span>\n      <span class=\"token comment\">// other appropriate code</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>If a <em>program fails to catch an exception</em>(没捕获只抛出), the JVM interpreter prints information about the exception, and the location where it occurred.</p>\n<p><img src=\"java1/image-20220518161430969-1653819852853.png\" alt=\"java1/image-20220518161430969\"></p>\n<h4 id=\"2-4-Assertions-in-Java\"><a href=\"#2-4-Assertions-in-Java\" class=\"headerlink\" title=\"2.4.Assertions in Java\"></a>2.4.<strong>Assertions in Java</strong></h4><p>在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告或退出。</p>\n<p>Java statements that enable you to assert (or check) an assumptionabout your program</p>\n<p>一般来说，assertion用于保证程序最基本、关键的正确性。</p>\n<p>Assertions are used to ensure program correctness and avoid logic errors. </p>\n<p>– For internal consistency checks, e.g. to check the object state following mutation (due to a <em>setter</em> method being called).</p>\n<p>– During development (to <em>enable debugging</em>) but usually removed in production versions, e.g. via a run-time option.在产品代码中移除</p>\n<ul>\n<li>Java assertions are declared via an <strong>assert</strong> statement</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">assert</span> assertion<span class=\"token operator\">-</span>expression \n<span class=\"token keyword\">assert</span> assertion<span class=\"token operator\">-</span>expression <span class=\"token operator\">:</span> detailMessage<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>– The <strong>assertion-expression</strong>（boolean类型） expresses something that should be <em>true</em> at this point.</p>\n<p>– The <strong>detailMessage</strong> is a primitive type or an <strong>Object</strong> value（是要传入AssertionError构造方法的信息，会打印该错误信息）.</p>\n<p>– An <strong>AssertionError</strong> exception is thrown if the assertion is <em>false</em>.（如果assertion是false就抛出一个AssertionError）是Error的子类</p>\n<ul>\n<li><p>Assertions are disabled by default, at runtime. But you can always,</p>\n<p>– enable your program to run with assertions by calling it with the </p>\n<p>-enableassertions (<strong>or</strong> in short form, <strong>-ea</strong>) switch</p>\n<p>– disable your program from running with assertions by calling it with the </p>\n<p>-disableassertions (<strong>or</strong> in short form, <strong>-da</strong>) switch</p>\n<p>– enable&#x2F;disable assertions at <em>package level</em> and at <em>class level</em>.</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">java –ea AssertionDemo\njava –da Test\njava –ea:ClassUsedByTest Test\njava –da:ClassUsedByAssertionDemo AssertionDemo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>不要使用assertions的情况</li>\n</ul>\n<p>– Should not be used to check the validity of a public method’s argument(s). </p>\n<p>对于公共函数，我们通常不使用assertion检查，因为一般来说，公共函数必须对无效的参数进行检查和处理。而私有函数往往是直接使用的</p>\n<p>– Do not include normal functionality(不要用于改变程序中参数的操作，断言不应该以任何方式改变程序的状态)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Incorrect use of assertions:</span>\n<span class=\"token keyword\">assert</span> book<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-File-I-x2F-O\"><a href=\"#3-File-I-x2F-O\" class=\"headerlink\" title=\"3.File I&#x2F;O\"></a>3.<strong>File I&#x2F;O</strong></h3><p>Data stored in variables, arrays, objects is temporary: once a program has finished executing, information is lost!</p>\n<p><em>Saving data</em> requires information to be stored in a file on a disk&#x2F;CD</p>\n<ul>\n<li><p>two ways of saving data：</p>\n<ul>\n<li><p>Using <em>serialisation</em>：[Java 序列化](<a href=\"https://www.runoob.com/java/java-serialization.html\">Java 序列化 | 菜鸟教程 (runoob.com)</a>)</p>\n<p>The data stored will only be used by the Java program that generated it. </p>\n</li>\n<li><p>Using a file (such as a plain text file)</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>This interaction with an external source is what we refer to as Input&#x2F;Output: </p>\n<p>– <em>Input</em>: to bring in information (<em>read</em>) </p>\n<p>– <em>Output</em>: to send out information (<em>write</em>) </p>\n<p>can be </p>\n<p>– <em>anywhere</em>: </p>\n<p>– <em>of any type</em> (any object)</p>\n<p><img src=\"java1/image-20220602161326106.png\" alt=\"java1/image-20220602161326106\"></p>\n<p>Java input&#x2F;output makes use of <em>streams</em>: </p>\n<p>– A stream is a connection to a source of data or to a destination for data (sometimes both).</p>\n<p>– Streams can represent any data, so a stream is a sequence of bytes that flow from a source to a destination.</p>\n<p>we <em>read information</em> from an input stream and <em>write</em> <em>information</em> to an output stream</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A program can manage multiple streams simultaneously</p></blockquote>\n<h4 id=\"1-two-broad-categories-of-streams\"><a href=\"#1-two-broad-categories-of-streams\" class=\"headerlink\" title=\"1.two broad categories of streams\"></a>1.two broad categories of streams</h4><p>Java has two broad categories of streams:</p>\n<p>– byte streams（字节流）</p>\n<p>machine-formatted data（无法用文本编辑器读取二进制文件）</p>\n<p>• <strong>InputStream</strong></p>\n<p>• <strong>OutputStream</strong></p>\n<p><img src=\"java1/image-20220522182645667-1653819852853.png\" alt=\"java1/image-20220522182645667\"></p>\n<p>– character streams（文本流）</p>\n<p>for human readable data（可以用文本编辑器处理）</p>\n<p>• <strong>Reader</strong></p>\n<p>• <strong>Writer</strong></p>\n<ul>\n<li><p>Text files contain data represented in human-readable form. </p>\n</li>\n<li><p>Binary files contain data represented in binary form.</p>\n</li>\n</ul>\n<h4 id=\"2-java-io-File-Class\"><a href=\"#2-java-io-File-Class\" class=\"headerlink\" title=\"2.java.io.File Class\"></a>2.<strong>java.io.File</strong> <strong>Class</strong></h4><p>File 类：</p>\n<p><img src=\"java1/image-20220522202319787-1653819852853.png\" alt=\"java1/image-20220522201307571\"></p>\n<p>Files live in directories within the file system.</p>\n<p>– Complete file name (represented by a <strong>String</strong>) consists of the path + name of file</p>\n<p><img src=\"java1/image-20220602161408801.png\" alt=\"java1/image-20220602161408801\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">File</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\文件夹\\\\文件名\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>java中使用\\代表Windows中的\\ 。</p>\n<p><strong>java.io.File</strong>: contains methods to obtain file properties, for renaming and deleting files. </p>\n<p>– A wrapper class for a file’s name and directory path: represents an abstract pathname. </p>\n<p>– It hides file system differences.</p>\n<p>– No exception is thrown if file does not exist</p>\n<p>Constructors：</p>\n<p><img src=\"java1/image-20220602161440131.png\" alt=\"java1/image-20220602161440131\"></p>\n<p>methods</p>\n<p><img src=\"java1/image-20220602161449481.png\" alt=\"java1/image-20220602161449481\"></p>\n<ul>\n<li><p>boolean <strong>exists</strong>() <strong>&#x2F;</strong> boolean <strong>isDirectory</strong>() &#x2F; boolean <strong>isFile</strong>()</p>\n</li>\n<li><p>boolean <strong>canRead</strong>() <strong>&#x2F;</strong> boolean <strong>canWrite</strong>()</p>\n</li>\n<li><p>boolean <strong>delete</strong>(): returns <strong>true</strong> if file successfully deleted</p>\n</li>\n<li><p>String <strong>getAbsolutePath</strong>(): returns complete absolutefile&#x2F;directory name</p>\n</li>\n<li><p>boolean <strong>renameTo</strong>(File dest): returns <strong>true</strong> if operation successful</p>\n</li>\n<li><p>long <strong>length</strong>(): returns length of the file in bytes</p>\n</li>\n<li><p>String[] <strong>list</strong>(): returns an array of strings containing the list of files in this directory</p>\n<p><img src=\"java1/image-20220522202635587-1653819852853.png\" alt=\"java1/image-20220522202635587\"></p>\n</li>\n</ul>\n<h4 id=\"4-Reading-from-x2F-Writing-to-files\"><a href=\"#4-Reading-from-x2F-Writing-to-files\" class=\"headerlink\" title=\"4. Reading from &#x2F; Writing to files\"></a>4. <strong>Reading from &#x2F; Writing to files</strong></h4><p><em>1. Open file</em></p>\n<p>– Needs the file’s name and maybe its location (path).</p>\n<p>– Open file by creating an instance of an appropriate stream class.</p>\n<p><em>2. Perform operations</em></p>\n<p>– Read from and&#x2F;or write to the file.</p>\n<p>– Call instance methods that belong to the &#x3D;&#x3D;stream object&#x3D;&#x3D;’s class.</p>\n<p><em>3. Close file</em>(一定要释放资源)</p>\n<p>– Any class from <strong>InputStream</strong>, <strong>OutputStream</strong>, <strong>Reader</strong> and <strong>Writer</strong> has a <strong>close()</strong> method.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> File I&#x2F;O can cause a large number of <strong>exceptions</strong> to be thrown.</p></blockquote>\n<h4 id=\"5-FileReader-versus-FileWriter\"><a href=\"#5-FileReader-versus-FileWriter\" class=\"headerlink\" title=\"5.FileReader versus FileWriter\"></a>5.<strong>FileReader</strong> <strong>versus</strong> <strong>FileWriter</strong></h4><p><strong>FileReader</strong> </p>\n<p>Java <code>FileReader</code>类继承自<code>InputStreamReader</code>类。 <code>FileReader</code>用于读取字符流。<br><code>FileReader</code>类有几个构造函数来创建所需的对象。 以下是<code>FileReader</code>类提供的构造函数列表。 </p>\n<p><img src=\"java1/image-20220522205201711-1653819852853.png\" alt=\"java1/image-20220522205201711\"></p>\n<p><strong>java.io.FileNotFoundException</strong> will occur if you attempt to create a <strong>FileReader</strong> with a nonexistent file.</p>\n<p><img src=\"java1/image-20220522205131531-1653819852853.png\" alt=\"java1/image-20220522205131531\"></p>\n<p>记得用close（）关闭所有与之相关的系统资源</p>\n<p><strong>FileWriter</strong></p>\n<p>在给出 File 对象的情况下构造一个 FileWriter 对象。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">FileWriter(File file)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在给出 File 对象的情况下构造一个 FileWriter 对象。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">FileWriter(File file, boolean append)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>构造与某个文件描述符相关联的 FileWriter 对象。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">FileWriter(FileDescriptor fd)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在给出文件名的情况下构造 FileWriter 对象，它具有指示是否挂起写入数据的 boolean 值（为true则下一次写入在本次末尾进行）。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">FileWriter(String fileName, boolean append)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>FileWriter</strong>: If the file doesn’t exist, a new file will be created.</p>\n<p><img src=\"java1/image-20220522205940428-1653819852853.png\" alt=\"java1/image-20220522205940428\"></p>\n<p>void <strong>write</strong>(int c)</p>\n<p>void <strong>write</strong>(byte[] cbuf)</p>\n<p>void <strong>write</strong>(char[] cbuf,int off,int len)</p>\n<p>void <strong>write</strong>(String str)</p>\n<p>void <strong>write</strong>(String str, int off,int len) </p>\n<p>记得用close（）关闭所有与之相关的系统资源</p>\n<p><strong>BufferedReader</strong></p>\n<p><img src=\"java1/image-20220602161507595.png\" alt=\"java1/image-20220602161507595\"></p>\n<p>BufferedReader维护一个内部<strong>的8192个字符缓冲器</strong>。在BufferedReader中进行读取操作期间，将从磁盘读取一部分字符并将其存储在内部缓冲区中。 并且从内部缓冲区中单独读取字符。因此，减少了与磁盘的通信次数。</p>\n<p>为了创建一个BufferedReader，我们必须首先导入java.io.BuferedReader包。导入软件包后，就可以创建阅读器。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F;创建一个FileReader\nFileReader file &#x3D; new FileReader(String file);\n\n&#x2F;&#x2F;创建一个BufferedReader\nBufferedReader buffer &#x3D; new BufferedReader(file);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的示例中，我们创建了一个名为buffer的BufferedReader和一个名为file的FileReader。</p>\n<p>此处，BufferedReader的内部缓冲区的默认大小为8192个字符。 但是，我们也可以指定内部缓冲区的大小。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F;创建一个具有指定大小的内部缓冲区的BufferdReader\nBufferedReader buffer &#x3D; new BufferedReader(file, int size);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>read()方法</p>\n<ul>\n<li>read() - 从阅读器的内部缓冲区读取单个字符</li>\n<li>read(char[] array) - 从阅读器读取字符并将其存储在指定的数组中</li>\n<li>read(char[] array, int start, int length)- 从阅读器读取等于length字符的数量，并从start位置开始存储在指定的数组中</li>\n</ul>\n<p>skip()方法</p>\n<p>要丢弃和跳过指定数量的字符，可以使用skip(int a)方法。</p>\n<p>readline()方法（读取一行）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">readline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>**IOException **包含 <strong>FileNotFoundException</strong> 所以只需要抛出 <strong>IOException</strong>.</p>\n<h3 id=\"4-Collection-Classes\"><a href=\"#4-Collection-Classes\" class=\"headerlink\" title=\"4.Collection Classes\"></a>4.<strong>Collection Classes</strong></h3><p>Collection in Java: “an object that groups multiple elements into a single unit”.</p>\n<p>Java provides several interfaces, implementations and algorithms for handling collections of objects, via its Java Collections Framework (see <strong>java.util</strong> package).</p>\n<p>集合类和数组不一样，数组元素既可以是基本类型的值，也可以是对象（实际上保存的是对象的引用变量），而集合里只能保存对象（实际上只是保存对象的引用变量，但通常习惯上认为集合里保存的是对象）。</p>\n<p>Collection是单例集合的顶层接口,它表示一组对象,这些对象也称为Collection的元素，JDK不提供此接口的任何直接实现,它提供更具体的子接口(如Set和List)的实现</p>\n<p>collection的常用方法</p>\n<p><img src=\"java1/image-20220602161521978.png\" alt=\"java1/image-20220602161521978\"></p>\n<p>处理集合时的接口、实现类、算法</p>\n<p><img src=\"java1/image-20220529113726855-1653819852853.png\" alt=\"java1/image-20220529113726855\"></p>\n<p><img src=\"java1/image-20220602161534187.png\" alt=\"java1/image-20220602161534187\"></p>\n<h4 id=\"4-1-集合的interface\"><a href=\"#4-1-集合的interface\" class=\"headerlink\" title=\"4.1.集合的interface\"></a>4.1.集合的interface</h4><ul>\n<li><p>Set: A collection that contains no duplicate elements;（模拟数学中的集合）</p>\n</li>\n<li><p>List: An ordered collection (also known as a <em>sequence</em>). Elements can be accessed by their position      in the list, and it is possible to search for elements in the list. Lists allow for duplicate elements</p>\n</li>\n</ul>\n<p><img src=\"java1/image-20220602161547665.png\" alt=\"java1/image-20220602161547665\"></p>\n<p><img src=\"java1/image-20220602161555993.png\" alt=\"java1/image-20220602161555993\"></p>\n<ul>\n<li><p>Map: An object that maps keys to values. A map does not contain duplicate keys; each key can map to at most one value. </p>\n<p>Each key maps to one value only.</p>\n<p>Map 提供 key 到 value 的映射，你可以通过“键”查找“值”。一个 Map 中不能包含相同的 key ，每个 key 只能映射一个 value 。</p>\n</li>\n</ul>\n<h4 id=\"4-2-集合的实现类\"><a href=\"#4-2-集合的实现类\" class=\"headerlink\" title=\"4.2.集合的实现类\"></a>4.2.集合的实现类</h4><p><img src=\"java1/image-20220602161607517.png\" alt=\"java1/image-20220602161607517\"></p>\n<ul>\n<li><p>array 和arraylist: </p>\n<p>array 在初始化时必须确定长度</p>\n<p>array必须在分配值时必须确定位置（index）</p>\n</li>\n<li><p>Map的实现类 <strong>HashMap</strong> </p>\n<p>The <strong>HashMap</strong> class implements <strong>Map</strong> and is efficient for locating a value, as well as inserting and deleting a mapping.</p>\n<p>Entries are not ordered</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashMapTester</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> petSounds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npetSounds<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Meow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> petSounds<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouse\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Squeak\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npetSounds<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> petSounds<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"guineaPig\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Squeak\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map = \"</span> <span class=\"token operator\">+</span> petSounds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>petSounds<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value for key 'dog' is: \"</span> <span class=\"token operator\">+</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"java1/image-20220602161619596.png\" alt=\"java1/image-20220602161619596\"></p>\n<p>Java Iterator（迭代器）不是一个集合，它是一个接口，可以用于访问、遍历集合</p>\n<p>其中的方法：</p>\n<p><img src=\"java1/image-20220602161629351.png\" alt=\"java1/image-20220602161629351\"></p>\n<p>调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。</p>\n<p>调用 it.hasNext() 用于检测集合中是否还有元素。</p>\n<p>调用 it.remove() 将迭代器返回的元素删除。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> alist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Add Strings to alist</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> alist<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// No downcasting required.</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-2-dimensional-2D-Arrays\"><a href=\"#5-2-dimensional-2D-Arrays\" class=\"headerlink\" title=\"5.2-dimensional (2D) Arrays\"></a>5.<strong>2-dimensional (2D) Arrays</strong></h3><p>Java stores a 2D array as an array of arrays, e.g.</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nnums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nnums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>must <em>always</em> specify the first dimension,do <em>not</em> need to specify the second dimension</p>\n<p>A 2D array of objects is an array of an array of references to objects 对象的reference的数组的数组</p>\n<p>利用arraylist实现二维数组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> topList <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\ntopList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\ntopList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-Sorting\"><a href=\"#6-Sorting\" class=\"headerlink\" title=\"6.Sorting\"></a>6.<strong>Sorting</strong></h3><p><strong>Selection</strong> sort</p>\n<ol>\n<li><p>Find largest number and put it in the last position.</p>\n</li>\n<li><p>Find next largest number and put it next to last one.</p>\n</li>\n<li><p>Repeat until finished.</p>\n</li>\n</ol>\n<p><strong>Insertion</strong> sort:</p>\n<p>List of values is sorted by inserting (repeatedly) an unsorted element into a sorted sublist until the complete list is sorted</p>\n<p><strong>Bubble</strong> sort:</p>\n<p>– Several passes are made through the array.</p>\n<p>– Each time, successive adjacent pairs are compared.</p>\n<p>• If pair is in decreasing order, order of values is swapped.</p>\n<p>• Otherwise, move on to next pair.</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">void bubbleSort(double[] list) &#123;\nboolean changed &#x3D; true;\ndo &#123;\nchanged &#x3D; false;\nfor (int j &#x3D; 0;\nj &lt; list.length-1; j++)\nif (list[j] &gt; list[j+1]) &#123;\ndouble temp &#x3D; list[j];\nlist[j] &#x3D; list[j + 1];\nlist[j + 1] &#x3D; temp;\nchanged &#x3D; true;\n&#125;\n&#125; while (changed);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-Comparing-objects\"><a href=\"#7-Comparing-objects\" class=\"headerlink\" title=\"7.Comparing objects\"></a>7.<strong>Comparing objects</strong></h3><p>在java中接口comparable使我们经常要接触到的，比如对集合或者数组进行排序，我们经常使用到Arrays.sort()或者Collections.sort().当集合中的对象是自定义的对象时，我们有两种方法能够使排序方法应用到自定义对象的集合（数组）中</p>\n<p>Java defines two ways of comparing objects:</p>\n<ol>\n<li><p>The objects implement the <strong>Comparable</strong><E> interface.</p>\n<p>被排序的对象类要实现cmparable<E></p>\n</li>\n<li><p>A <strong>Comparator</strong> object is used to compare the two objects.</p>\n</li>\n</ol>\n<p>• If the objects are <strong>Comparable</strong><E>, they are said to be sorted by their “natural” order.（自然排序）</p>\n<p>A <strong>Comparable<E></strong> object can only offer one form of sorting. </p>\n<p>– To provide multiple forms of sorting, <strong>Comparators</strong> must be used.</p>\n<p>如果想对元素进行自然排序，必须在元素对象的类上实现comparable接口，该接口只有compareTo()一个方法。所以要重写compareTo()方法使其满足要求进行比较</p>\n<p>用sort方法 排序，表示升序排列（其算法简单来说就是每两个都比一次）<br>    （默认调用compareTo 如果返回1 则认为比较的对象比本对象大（放在后边））</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n    实现<span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span>接口\n        \n<span class=\"token keyword\">int</span> empID<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> eName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> salary<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> sal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nempID <span class=\"token operator\">=</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\neName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\nsalary <span class=\"token operator\">=</span> sal<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token string\">\"EmpID = \"</span> <span class=\"token operator\">+</span> empID <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Ename = \"</span> <span class=\"token operator\">+</span> eName <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span>\n<span class=\"token string\">\"Salary = \"</span> <span class=\"token operator\">+</span> salary<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> o1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">==</span> o1<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">></span> o1<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComparableDemo</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> ts1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nts1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40000.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nts1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Harry\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nts1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maggie\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50000.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nts1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chris\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70000.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>ts1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token class-name\">Iterator</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> itr <span class=\"token operator\">=</span> ts1<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">Object</span> element <span class=\"token operator\">=</span> itr<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"细碎知识\"><a href=\"#细碎知识\" class=\"headerlink\" title=\"细碎知识\"></a>细碎知识</h1><h2 id=\"1-String类中的format方法\"><a href=\"#1-String类中的format方法\" class=\"headerlink\" title=\"1.String类中的format方法\"></a>1.String类中的format方法</h2><p>format方法使用占位符进行格式化<br>常规类型、字符类型和数值类型的占位符格式：<br><code>%[index$][标识][最小宽度][.精度]转换符</code><br>日期和时间类型的占位符格式：<br><code>%[index$][标识][最小宽度]转换符</code><br>与参数不对应的占位符格式：<br><code>%[标识][最小宽度]转换符</code><br>其中index表示参数列表中的位置上的值<br>可用标识：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">标识</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">-</td>\n<td align=\"left\">在最小宽度内左对齐，不可与0标识一起使用</td>\n</tr>\n<tr>\n<td align=\"left\">0</td>\n<td align=\"left\">若内容长度不足最小宽度，则在左边用0来填充</td>\n</tr>\n<tr>\n<td align=\"left\">#</td>\n<td align=\"left\">对8进制和16进制，8进制前添加一个0,16进制前添加0x</td>\n</tr>\n<tr>\n<td align=\"left\">+</td>\n<td align=\"left\">结果总包含一个+或-号</td>\n</tr>\n<tr>\n<td align=\"left\">空格</td>\n<td align=\"left\">正数前加空格，负数前加-号</td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td align=\"left\">只用与十进制，每3位数字间用,分隔</td>\n</tr>\n<tr>\n<td align=\"left\">(</td>\n<td align=\"left\">若结果为负数，则用括号括住，且不显示符号</td>\n</tr>\n</tbody></table>\n<p>可用转换符：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">转换符</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">b</td>\n<td align=\"left\">布尔类型，只要实参为非false的布尔类型，均格式化为字符串true，否则为字符串false</td>\n</tr>\n<tr>\n<td align=\"left\">n</td>\n<td align=\"left\">平台独立的换行符, 也可通过System.getProperty(“line.separator”)获取</td>\n</tr>\n<tr>\n<td align=\"left\">f</td>\n<td align=\"left\">浮点数型（十进制）。显示9位有效数字，且会进行四舍五入。如99.99</td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td align=\"left\">浮点数型（十六进制）</td>\n</tr>\n<tr>\n<td align=\"left\">e</td>\n<td align=\"left\">指数类型。如9.38e+5</td>\n</tr>\n<tr>\n<td align=\"left\">g</td>\n<td align=\"left\">浮点数型（比%f，%a长度短些，显示6位有效数字，且会进行四舍五入）</td>\n</tr>\n<tr>\n<td align=\"left\">s</td>\n<td align=\"left\">字符串类型</td>\n</tr>\n<tr>\n<td align=\"left\">c</td>\n<td align=\"left\">字符类型</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> result1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明今年%d岁,他住在%s,他的月工资有%.2f\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"北京市\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6633.435</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出:小明今年25岁,他住在北京市,他的月工资有6633.44</span>\n<span class=\"token comment\">/*****************************************************/</span>\n<span class=\"token keyword\">double</span> num <span class=\"token operator\">=</span> <span class=\"token number\">123.4567899</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> result2 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%e\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//输出：1.234568e+02</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-javadoc\"><a href=\"#2-javadoc\" class=\"headerlink\" title=\"2.javadoc\"></a>2.javadoc</h2><p>To generate <strong>javadoc</strong>documentation, type on the command line:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">javadoc -d docsfile.java <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>View the docs with a web browser:</p>\n<p> – Start with the index.html file in the <strong>docs</strong> subdirectory.</p>\n<p><a href=\"https://blog.csdn.net/lsy0903/article/details/89893934?ops_request_misc=%7B%22request_id%22:%22164847134316782246413290%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164847134316782246413290&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-89893934.142%5Ev5%5Epc_search_insert_es_download,143%5Ev6%5Econtrol&utm_term=javadoc%E6%B3%A8%E9%87%8A&spm=1018.2226.3001.4187\"> Java文档注释用法+JavaDoc的使用详解_阿★永的博客-CSDN博客_javadoc</a></p>\n<h2 id=\"3-增强for\"><a href=\"#3-增强for\" class=\"headerlink\" title=\"3.增强for\"></a>3.增强for</h2><p>for 的其他语法</p>\n<p><img src=\"java1/image-20220602161656225.png\" alt=\"java1/image-20220602161656225\"></p>\n<p>for (循环变量类型 循环变量名称 : 要被遍历的对象) 循环体 </p>\n<p>借助这种语法，遍历一个数组的操作就可以采取这样的写法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> integers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span>， <span class=\"token number\">2</span>， <span class=\"token number\">3</span>， <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> integers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//等同于 int i;i&lt;integers;i++</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>可以实现遍历\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-导包\"><a href=\"#4-导包\" class=\"headerlink\" title=\"4.导包\"></a>4.导包</h2><p><img src=\"java1/image-20220405163334345-1653819852853.png\" alt=\"java1/image-20220405163334345\"></p>\n<p><img src=\"java1/image-20220405163354269-1653819852853.png\" alt=\"java1/image-20220405163354269\"></p>\n<h2 id=\"5-Sting-和int-互换\"><a href=\"#5-Sting-和int-互换\" class=\"headerlink\" title=\"5.Sting 和int 互换\"></a>5.Sting 和int 互换</h2><p>字串 String 转换成整数 int</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将整数 int 转换成字串 String </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-scanner\"><a href=\"#6-scanner\" class=\"headerlink\" title=\"6.scanner\"></a>6.scanner</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"7-运行错误和编译错误\"><a href=\"#7-运行错误和编译错误\" class=\"headerlink\" title=\"7.运行错误和编译错误\"></a>7.运行错误和编译错误</h2><p>①编译错误一般指语法错误或者很明显的逻辑错误。<br>        如：缺少分号，少写括号，关键字书写错误等， 在eclipse往往会画红线。<br>     ②运行错误是在没有编译错误的基础上运行后产生的逻辑错误。<br>         如：空指针异常，除数为0，越界访问等，一般会抛出异常。</p>\n","feature":true,"text":"JAVA NOTE 大二下学期qm Java的笔记（略有补充），仅供参考 [TOC] Teaching Block11.phase of java programphase1: Edit(by editor ): Every java program have the exten...","link":"","photos":[],"count_time":{"symbolsCount":"56k","symbolsTime":"51 mins."},"categories":[{"name":"-java","slug":"java","count":1,"path":"api/categories/java.json"}],"tags":[{"name":"大二下","slug":"大二下","count":7,"path":"api/tags/大二下.json"},{"name":"BUPT","slug":"BUPT","count":7,"path":"api/tags/BUPT.json"},{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JAVA-NOTE\"><span class=\"toc-text\">JAVA NOTE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Teaching-Block1\"><span class=\"toc-text\">Teaching Block1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-phase-of-java-program\"><span class=\"toc-text\">1.phase of java program</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-%E8%A1%A5%E5%85%851-%E5%B8%B8%E8%A7%81dos%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">1.1.补充1.常见dos命令</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-%E8%A1%A5%E5%85%852-main-method\"><span class=\"toc-text\">1.2.补充2.main method</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Basic-data-types%EF%BC%88%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%89\"><span class=\"toc-text\">2.Basic data types（基本数据类型、引用数据类型）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-introduction\"><span class=\"toc-text\">2.1.introduction</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E8%A1%A5%E5%85%851-%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">2.2.补充1.变量命名规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E8%A1%A5%E5%85%852-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">2.3.补充2.类型转换</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Operators\"><span class=\"toc-text\">3.Operators</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-introduction\"><span class=\"toc-text\">3.1.introduction</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Increments-and-Decrements\"><span class=\"toc-text\">Increments and Decrements</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Operator-Precedence-%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">Operator Precedence(优先级)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Relational-Operations\"><span class=\"toc-text\">Relational Operations</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Logical-operators\"><span class=\"toc-text\">Logical operators</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#switch-statement\"><span class=\"toc-text\">switch statement</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Conditional-Operator\"><span class=\"toc-text\">Conditional Operator</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#The-break-and-continue-statements\"><span class=\"toc-text\">The break and continue statements</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-IDEA%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">3.2.IDEA使用</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-OO-programming-and-objects\"><span class=\"toc-text\">4. OO programming and objects</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-introduction\"><span class=\"toc-text\">4.1.introduction</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#What-is-OO-programming\"><span class=\"toc-text\">What is OO programming?</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#What-is-object\"><span class=\"toc-text\">What is object?</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Attributes-or-states-of-an-object\"><span class=\"toc-text\">Attributes (or states) of an object:</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Operations-or-behaviours-of-an-object\"><span class=\"toc-text\">Operations (or behaviours) of an object:</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#What-is-a-class\"><span class=\"toc-text\">What is a class?</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#UML\"><span class=\"toc-text\">UML</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-Methods\"><span class=\"toc-text\">4.2.Methods</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#syntax\"><span class=\"toc-text\">syntax</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Calling-%E8%B0%83%E7%94%A8-a-method\"><span class=\"toc-text\">Calling(调用) a method</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Pass-by-value%EF%BC%88Pass-by-copy%EF%BC%89\"><span class=\"toc-text\">Pass-by-value（Pass-by-copy）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Method-Overloading\"><span class=\"toc-text\">Method Overloading</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-Create-a-class\"><span class=\"toc-text\">4.3.Create a class</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#create-a-object\"><span class=\"toc-text\">create a object</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Using-instance-variables-and-methods\"><span class=\"toc-text\">Using instance variables and methods</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Constructors\"><span class=\"toc-text\">Constructors</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Data-Encapsulation-%E5%AF%B9%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">Data Encapsulation(对成员变量封装)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#this%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">this引用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#toString-method\"><span class=\"toc-text\">toString() method</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-4-Method-parameters-%E3%80%81-local-variables%E3%80%81instance-variables\"><span class=\"toc-text\">4.4.Method parameters 、 local variables、instance variables</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Initialisation%EF%BC%88%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%89\"><span class=\"toc-text\">Initialisation（变量初始化）</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Teaching-Block2\"><span class=\"toc-text\">Teaching Block2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Arrays\"><span class=\"toc-text\">1.Arrays</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-copy-array\"><span class=\"toc-text\">1.1.copy array</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-Passing-Arrays-to-Methods\"><span class=\"toc-text\">1.2.Passing Arrays to Methods</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-%E2%80%9CPrep-code%E2%80%9D\"><span class=\"toc-text\">1.3.“Prep code”</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-String\"><span class=\"toc-text\">2.String</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#StringTokenizer-Class\"><span class=\"toc-text\">StringTokenizer Class</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-StringBuilder\"><span class=\"toc-text\">3.StringBuilder</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-ArrayList\"><span class=\"toc-text\">4.ArrayList</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-Some-ArrayList-methods\"><span class=\"toc-text\">4.1.Some ArrayList methods</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Inheritance-and-Abstract-classes\"><span class=\"toc-text\">5.Inheritance and Abstract classes</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-two-primary-types-of-relationships-between-classes\"><span class=\"toc-text\">5.1.two primary types of relationships between classes</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-Inheritance\"><span class=\"toc-text\">5.2.Inheritance</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-2-1-override\"><span class=\"toc-text\">5.2.1.override</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-2-2-super%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">5.2.2.super的使用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-2-4-final%E5%92%8Cstatic%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">5.2.4.final和static关键字</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-polymorphism\"><span class=\"toc-text\">6.polymorphism</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-java%E7%9A%84object%E7%B1%BB%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">6.1.java的object类中常用方法：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-abstract-class\"><span class=\"toc-text\">7.abstract class</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-inner-class\"><span class=\"toc-text\">8.inner class</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-Debugger\"><span class=\"toc-text\">9.Debugger</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Teaching-Block3\"><span class=\"toc-text\">Teaching Block3</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-interface\"><span class=\"toc-text\">1.interface</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Garbage-Collection\"><span class=\"toc-text\">2.Garbage Collection</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E5%9B%9B%E7%A7%8D%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%EF%BC%9A\"><span class=\"toc-text\">2.1.四种变量的存储位置：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-Methods-and-the-Stack\"><span class=\"toc-text\">2.2.Methods and the Stack</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-Object-References\"><span class=\"toc-text\">2.3.Object References</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%93%BE-constructor-chaining\"><span class=\"toc-text\">2.4.构造函数链 constructor chaining</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-5-Life-of-Objects-and-Variables\"><span class=\"toc-text\">2.5.Life of Objects and Variables</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-GC%EF%BC%88%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%EF%BC%89\"><span class=\"toc-text\">2.6.GC（简单介绍）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E7%94%A8%E7%B1%BB\"><span class=\"toc-text\">3.常用类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-Math%E7%B1%BB\"><span class=\"toc-text\">3.1.Math类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-1%E6%96%B9%E6%B3%95%EF%BC%88%E5%85%A8%E9%83%A8%E4%B8%BA%E7%B1%BB%E6%96%B9%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">3.1.1方法（全部为类方法）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-2%E5%88%A9%E7%94%A8static-final%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.1.2利用static final定义变量</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-Random-Class\"><span class=\"toc-text\">3.2.Random Class</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E5%8C%85%E8%A3%85%E7%B1%BB-Wrapper-Classes\"><span class=\"toc-text\">3.3.包装类(Wrapper Classes)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-1%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1%EF%BC%88Wrapping-versus-Unwrapping%EF%BC%89\"><span class=\"toc-text\">3.2.1装箱、拆箱（Wrapping versus Unwrapping）</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-Scanner-Class\"><span class=\"toc-text\">3.3.Scanner Class</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Recursion\"><span class=\"toc-text\">4.Recursion</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Teaching-Block4\"><span class=\"toc-text\">Teaching Block4</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-GUI\"><span class=\"toc-text\">1.GUI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-3-main-concepts\"><span class=\"toc-text\">1.1.  3 main concepts:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E4%B8%A4%E7%A7%8D%E5%AE%B9%E5%99%A8%EF%BC%9A\"><span class=\"toc-text\">1.2.两种容器：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-awt%E5%8C%85%EF%BC%9A\"><span class=\"toc-text\">1.3.awt包：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-Containers%EF%BC%88%E4%B8%BB%E8%A6%81%E7%94%A8swing%EF%BC%89\"><span class=\"toc-text\">1.4.Containers（主要用swing）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4-1-JFrame%E7%AA%97%E4%BD%93%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89\"><span class=\"toc-text\">1.4.1.JFrame窗体（基础）</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-Event-handle-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">1.5.Event handle(事件处理)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-6-%E5%B8%B8%E7%94%A8component%EF%BC%9A\"><span class=\"toc-text\">1.6.常用component：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-6-1JLabel\"><span class=\"toc-text\">1.6.1JLabel:</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-6-2-JButton\"><span class=\"toc-text\">1.6.2 JButton</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-6-Layout\"><span class=\"toc-text\">1.6.Layout</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-6-1-FlowLayout\"><span class=\"toc-text\">1.6.1.FlowLayout</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-6-2-GridLayout\"><span class=\"toc-text\">1.6.2.GridLayout</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-6-3-BorderLayout\"><span class=\"toc-text\">1.6.3.BorderLayout</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-7-Three-types-of-graphics-in-GUI\"><span class=\"toc-text\">1.7.Three types of graphics in GUI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-7-1-Graphics-class\"><span class=\"toc-text\">1.7.1.Graphics class:</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-7-2-Graphics2D-Class\"><span class=\"toc-text\">1.7.2.Graphics2D Class</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-7-3-Color-Class\"><span class=\"toc-text\">1.7.3.Color Class</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Exception-Handling\"><span class=\"toc-text\">2.Exception Handling</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-Checked-versus-Unchecked-Exceptions\"><span class=\"toc-text\">2.1.Checked versus Unchecked Exceptions</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-Run-Time-Error-Handling\"><span class=\"toc-text\">2.2.Run-Time Error Handling</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-Creating-Exception-Classes\"><span class=\"toc-text\">2.3.Creating Exception Classes</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-Assertions-in-Java\"><span class=\"toc-text\">2.4.Assertions in Java</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-File-I-x2F-O\"><span class=\"toc-text\">3.File I&#x2F;O</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-two-broad-categories-of-streams\"><span class=\"toc-text\">1.two broad categories of streams</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-java-io-File-Class\"><span class=\"toc-text\">2.java.io.File Class</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-Reading-from-x2F-Writing-to-files\"><span class=\"toc-text\">4. Reading from &#x2F; Writing to files</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-FileReader-versus-FileWriter\"><span class=\"toc-text\">5.FileReader versus FileWriter</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Collection-Classes\"><span class=\"toc-text\">4.Collection Classes</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E9%9B%86%E5%90%88%E7%9A%84interface\"><span class=\"toc-text\">4.1.集合的interface</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E9%9B%86%E5%90%88%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">4.2.集合的实现类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-dimensional-2D-Arrays\"><span class=\"toc-text\">5.2-dimensional (2D) Arrays</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-Sorting\"><span class=\"toc-text\">6.Sorting</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-Comparing-objects\"><span class=\"toc-text\">7.Comparing objects</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%86%E7%A2%8E%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">细碎知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-String%E7%B1%BB%E4%B8%AD%E7%9A%84format%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.String类中的format方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-javadoc\"><span class=\"toc-text\">2.javadoc</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%A2%9E%E5%BC%BAfor\"><span class=\"toc-text\">3.增强for</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%AF%BC%E5%8C%85\"><span class=\"toc-text\">4.导包</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-Sting-%E5%92%8Cint-%E4%BA%92%E6%8D%A2\"><span class=\"toc-text\">5.Sting 和int 互换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-scanner\"><span class=\"toc-text\">6.scanner</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF%E5%92%8C%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">7.运行错误和编译错误</span></a></li></ol></li></ol>","author":{"name":"赫","slug":"blog-author","avatar":"https://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=ba0d9106cfbf6c81f76224ee8c0e9d0d/b17eca8065380cd7b7acd783a244ad3459828129.jpg","link":"/","description":"life&&study","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"产品开发 topic8","uid":"5928bf74ef9f1a5ddcaab207604ef661","slug":"产品开发-topic8","date":"2022-04-24T10:20:23.000Z","updated":"2022-06-02T12:53:42.653Z","comments":true,"path":"api/articles/产品开发-topic8.json","keywords":null,"cover":[],"text":"Topic 8 – Detail Design using prototypesDetail Design ⚫ Aim ⚫ Control Documentation ⚫ Departmental responsibilities Prototype ⚫ Definitions:...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"大二下","slug":"大二下","count":7,"path":"api/tags/大二下.json"},{"name":"BUPT","slug":"BUPT","count":7,"path":"api/tags/BUPT.json"},{"name":"产品开发","slug":"产品开发","count":3,"path":"api/tags/产品开发.json"}],"author":{"name":"赫","slug":"blog-author","avatar":"https://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=ba0d9106cfbf6c81f76224ee8c0e9d0d/b17eca8065380cd7b7acd783a244ad3459828129.jpg","link":"/","description":"life&&study","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}